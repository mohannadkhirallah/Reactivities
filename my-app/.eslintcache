[{"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\index.tsx":"1","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\reportWebVitals.ts":"2","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\nav\\NavBar.tsx":"4","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityDashboard.tsx":"5","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityList.tsx":"6","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetails.tsx":"7","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\form\\ActivityForm.tsx":"8","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\api\\agent.ts":"9","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\LoadingCompnent.tsx":"10","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\activityStore.ts":"11","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\models\\activity.ts":"12","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\home\\HomePage.tsx":"13","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\ScrollToTop.tsx":"14","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityListItem.tsx":"15","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedHeader.tsx":"16","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedInfo.tsx":"17","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedChat.tsx":"18","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedSideBar.tsx":"19","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\NotFound.tsx":"20"},{"size":888,"mtime":1611315000043,"results":"21","hashOfConfig":"22"},{"size":425,"mtime":499162500000,"results":"23","hashOfConfig":"22"},{"size":1547,"mtime":1611315060033,"results":"24","hashOfConfig":"22"},{"size":806,"mtime":1610716942185,"results":"25","hashOfConfig":"22"},{"size":964,"mtime":1610717459947,"results":"26","hashOfConfig":"22"},{"size":976,"mtime":1610810820299,"results":"27","hashOfConfig":"22"},{"size":1548,"mtime":1611312942158,"results":"28","hashOfConfig":"22"},{"size":3174,"mtime":1610813807976,"results":"29","hashOfConfig":"22"},{"size":1679,"mtime":1611315071427,"results":"30","hashOfConfig":"22"},{"size":334,"mtime":1610100944050,"results":"31","hashOfConfig":"22"},{"size":4608,"mtime":1611310511277,"results":"32","hashOfConfig":"22"},{"size":171,"mtime":1609525400529,"results":"33","hashOfConfig":"22"},{"size":854,"mtime":1611313085924,"results":"34","hashOfConfig":"22"},{"size":313,"mtime":1610716654069,"results":"35","hashOfConfig":"22"},{"size":1560,"mtime":1610811173174,"results":"36","hashOfConfig":"22"},{"size":1859,"mtime":1610813180532,"results":"37","hashOfConfig":"22"},{"size":1745,"mtime":1610813377424,"results":"38","hashOfConfig":"22"},{"size":2454,"mtime":1610813644337,"results":"39","hashOfConfig":"22"},{"size":2281,"mtime":1610813687596,"results":"40","hashOfConfig":"22"},{"size":629,"mtime":1611308813871,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"q2xiso",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\index.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\reportWebVitals.ts",[],["89","90"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\App.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\nav\\NavBar.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityDashboard.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityList.tsx",["91","92"],"import { group } from 'console';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { Fragment, useContext } from 'react'\r\nimport { Item , Label, Segment} from 'semantic-ui-react';\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport { ActivityListItem } from './ActivityListItem';\r\n\r\nexport const ActivityList:React.FC = () => {\r\n    const activityStore= useContext(ActivityStore);\r\n    const {activitiesByDate} =activityStore;\r\n    return (\r\n        <Fragment>\r\n          {activitiesByDate.map(([group,activities])=>(\r\n            <Fragment key={group}>\r\n              <Label size='large' color='blue'>{group}</Label>\r\n                <Item.Group divided>\r\n                  {activities.map(activity =>(\r\n                <ActivityListItem activity={activity} ></ActivityListItem>\r\n                ))}\r\n                </Item.Group>\r\n            </Fragment>\r\n          ))}\r\n\r\n      </Fragment>\r\n\r\n\r\n    )\r\n}\r\nexport default observer(ActivityList);","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetails.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\form\\ActivityForm.tsx",["93"],"import React,{FormEvent, useContext, useEffect, useState} from 'react'\r\nimport { Button, Form, Grid, GridColumn, Segment } from 'semantic-ui-react'\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport {v4 as uuid} from 'uuid';\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\ninterface DetailsParams\r\n{\r\n    id:string\r\n}\r\n\r\nexport const ActivityForm:React.FC<RouteComponentProps<DetailsParams>> = ({history,match}) => {\r\n\r\n    const activityStore= useContext(ActivityStore);\r\n    const {createActivity,editActivity,submitting,selectedActivity:initialFormState,LoadActivity,clearActivity}= activityStore;\r\n\r\n    useEffect(()=>{\r\n        if(match.params.id && activity.id.length ===0)\r\n        {\r\n            LoadActivity(match.params.id).then(\r\n                ()=> initialFormState && setActivity(initialFormState));\r\n        }\r\n        return () =>{\r\n            clearActivity();\r\n        }\r\n    },[LoadActivity,clearActivity,match.params.id,initialFormState]);\r\n\r\n    const [activity,setActivity]=useState<IActivity>({\r\n        id:'',\r\n        title:'',\r\n        category:'',\r\n        date:'',\r\n        city:'',\r\n        venue:'',\r\n        description:'' \r\n    });\r\n\r\n    const handleInputChange=(event:FormEvent<HTMLInputElement|HTMLTextAreaElement>)=>{\r\n        const{name,value} =event.currentTarget;\r\n        setActivity({...activity,[name]:value});\r\n    };\r\n\r\n    const handleSubmit =()=>{\r\n        if(activity.id.length ===0)\r\n        {\r\n            let newActivity={\r\n                ...activity,\r\n                id:uuid()\r\n            }\r\n            createActivity(newActivity).then(()=>history.push(`/activities/${newActivity.id}`));\r\n        }\r\n        else{\r\n            editActivity(activity).then(()=>history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <GridColumn width={10}>\r\n            <Segment clearing>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Input onChange={handleInputChange} name='title' placeholder='Title' value={activity.title}/>\r\n                <Form.TextArea onChange={handleInputChange} name='description' rows={2} placeholder='Description' value={activity.description} />\r\n                <Form.Input onChange={handleInputChange} name='category' placeholder='Catgeory' value={activity.category}/>\r\n                <Form.Input onChange={handleInputChange} name='date' type='datetime-local' placeholder='Date' value={activity.date} />\r\n                <Form.Input onChange={handleInputChange} name='city' placeholder='City' value={activity.city}/>\r\n                <Form.Input onChange={handleInputChange} name='venue' placeholder='Venue' value={activity.venue}/>\r\n                <Button loading={submitting} floated='right' positive type='submit' content='Submit'/>\r\n                <Button floated='right' type='button' content='Cancel' onClick={()=> history.push('/activities')}/>\r\n            </Form>\r\n        </Segment>\r\n            </GridColumn>\r\n        </Grid>\r\n      \r\n    );\r\n}\r\nexport default observer(ActivityForm);","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\api\\agent.ts",["94","95","96"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\LoadingCompnent.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\activityStore.ts",["97"],"import { observable, action,makeAutoObservable,computed,configure,runInAction } from \"mobx\";\r\nimport { createContext, SyntheticEvent } from \"react\";\r\nimport agent from \"../api/agent\";\r\nimport {IActivity} from '../models/activity'\r\n\r\nconfigure({enforceActions:'always'});\r\n\r\nclass ActivityStore{\r\n\r\n    activityRegistry = new Map();\r\n    loadingInitial = false;\r\n    selectedActivity:IActivity |undefined;\r\n    submitting =false;\r\n    target='';\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    @computed get activitiesByDate(){\r\n        console.log(this.groupActivitiesByDate( Array.from( this.activityRegistry.values())));\r\n        return this.groupActivitiesByDate( Array.from( this.activityRegistry.values()));\r\n    }; \r\n    \r\n    groupActivitiesByDate( activities:IActivity[])\r\n    {\r\n        const sortedActivities= activities.sort((a,b) => Date.parse(a.date) - Date.parse(b.date));\r\n        return Object.entries(sortedActivities.reduce((activities,activity)=>{\r\n            const date=activity.date.split('T')[0];\r\n            activities[date] =activities[date]?[...activities[date],activity]:[activity];\r\n            return activities;\r\n        },{}as {[key:string]:IActivity[]}));\r\n\r\n    }\r\n\r\n    @action loadActivities = async() => {\r\n        this.loadingInitial=true;\r\n        try\r\n        {\r\n            const activities= await agent.Activities.list();\r\n            runInAction( ()=>{\r\n                activities.forEach(actvity=>{\r\n                    actvity.date=actvity.date.split('.')[0];\r\n                    this.activityRegistry.set(actvity.id,actvity);\r\n                  });\r\n                  this.loadingInitial=false;\r\n            });\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(error);\r\n            runInAction(()=>{\r\n                this.loadingInitial=false;\r\n            })\r\n        }\r\n    };\r\n\r\n    @action LoadActivity =async (id:string) =>\r\n    {\r\n        // Getting atcivity from the activity list \r\n        // Or get activity from Data base that does does exist in the dashboard or refresh the page (no activity in the regirsty)\r\n        let activity= this.getActivity(id);\r\n        if(activity) {\r\n            this.selectedActivity=activity;\r\n        }\r\n       else\r\n       {\r\n            this.loadingInitial=true;\r\n            try\r\n            {\r\n                activity = agent.Activities.details(id);\r\n                runInAction(()=>{\r\n                    this.selectedActivity=activity;\r\n                    this.loadingInitial=false;\r\n        \r\n                });\r\n            }\r\n            catch (ex)\r\n            {\r\n                console.log(ex);\r\n                runInAction(()=>{\r\n                    this.loadingInitial=false;\r\n                });\r\n            }\r\n       } \r\n\r\n    };\r\n\r\n    @action clearActivity=()=>{\r\n\r\n        this.selectedActivity=undefined;\r\n    };\r\n\r\n    getActivity =(id:string) =>{\r\n        return this.activityRegistry.get(id);\r\n    };\r\n\r\n    @action createActivity =async (activity:IActivity)=>\r\n    {\r\n        this.submitting=true;\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            runInAction(()=>{\r\n                this.activityRegistry.set(activity.id,activity);\r\n                this.submitting=false;\r\n            });\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(()=>{\r\n                this.submitting=false;\r\n            })\r\n        }\r\n\r\n    };\r\n    @action editActivity = async(activity:IActivity)=>{\r\n\r\n        this.submitting= true;\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(()=>{\r\n\r\n                this.activityRegistry.set(activity.id,activity);\r\n                this.selectedActivity=activity;\r\n                this.submitting=false;\r\n            })\r\n\r\n        } catch (error) {\r\n            runInAction(()=>{\r\n                this.submitting=false;\r\n            })\r\n            console.log(error);\r\n        }\r\n\r\n    };\r\n\r\n    @action deleteActivity = async (event:SyntheticEvent<HTMLButtonElement>,id:string) =>{\r\n\r\n        this.submitting=true;\r\n        try {\r\n\r\n            this.target=event.currentTarget.name;\r\n            await agent.Activities.delete(id);\r\n            runInAction(()=>{\r\n                this.activityRegistry.delete(id);\r\n                this.submitting=false;\r\n            })\r\n \r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(()=>{\r\n                this.submitting=false;\r\n            })\r\n\r\n        }\r\n    };\r\n\r\n}\r\nexport default createContext(new ActivityStore())","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\models\\activity.ts",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\home\\HomePage.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\ScrollToTop.tsx",["98"],"import {useEffect} from 'react';\r\nimport {withRouter} from 'react-router-dom'\r\nimport React from 'react'\r\n\r\n const ScrollToTop = ({children, location:{pathname}}:any) => {\r\n    useEffect(()=>{\r\n        window.scrollTo(0,0);\r\n    },[pathname]);\r\n\r\n    return children;\r\n}\r\nexport default withRouter(ScrollToTop);\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityListItem.tsx",["99","100","101","102"],"import React, { useContext } from 'react';\r\nimport { Item , Button, Label, Segment, Icon} from 'semantic-ui-react';\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const ActivityListItem:React.FC<{activity:IActivity}> = ({activity}) => {\r\n    const activityStore= useContext(ActivityStore);\r\n    const {deleteActivity,submitting,target} =activityStore;\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group>\r\n                        <Item>\r\n                        <Item.Image size='tiny' circular src='/assets/user.png'/>\r\n                        <Item.Content>\r\n                        <Item.Header as='a'>{activity.title}</Item.Header>\r\n                        <Item.Description> Hosted by Bob </Item.Description>\r\n                        </Item.Content>\r\n                        </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <Icon name='clock'/>{activity.date}\r\n                <Icon name='marker'/>{activity.venue}, {activity.city}\r\n            </Segment>\r\n            <Segment secondary>\r\n                Attenddess will go here\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button as={Link} to ={`/activities/${activity.id}`} floated='right' content='View' color='blue'></Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n        \r\n    )\r\n}\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedHeader.tsx",["103"],"import { observe } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Item, Header, Button,Image } from 'semantic-ui-react'\r\nimport { IActivity } from '../../../app/models/activity';\r\n\r\nconst activityImageStyle = {\r\n  filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n  position: 'absolute',\r\n  bottom: '5%',\r\n  left: '5%',\r\n  width: '100%',\r\n  height: 'auto',\r\n  color: 'white'\r\n};\r\nexport const ActivityDetailedHeader :React.FC<{activity:IActivity}> = ({activity}) => {\r\n    return (\r\n            <Segment.Group>\r\n              <Segment basic attached='top' style={{ padding: '0' }}>\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment basic style={activityImageTextStyle}>\r\n                  <Item.Group>\r\n                    <Item>\r\n                      <Item.Content>\r\n                        <Header\r\n                          size='huge'\r\n                          content={activity.title}\r\n                          style={{ color: 'white' }}\r\n                        />\r\n                        <p>{activity.date}</p>\r\n                        <p>\r\n                          Hosted by <strong>Bob</strong>\r\n                        </p>\r\n                      </Item.Content>\r\n                    </Item>\r\n                  </Item.Group>\r\n                </Segment>\r\n              </Segment>\r\n              <Segment clearing attached='bottom'>\r\n                <Button color='teal'>Join Activity</Button>\r\n                <Button>Cancel attendance</Button>\r\n                <Button color='orange' floated='right'>\r\n                  Manage Event\r\n                </Button>\r\n              </Segment>\r\n            </Segment.Group>\r\n    )\r\n}\r\nexport default observer (ActivityDetailedHeader);\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedInfo.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedChat.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedSideBar.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\NotFound.tsx",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":1,"column":10,"nodeType":"110","messageId":"111","endLine":1,"endColumn":15},{"ruleId":"108","severity":1,"message":"112","line":4,"column":24,"nodeType":"110","messageId":"111","endLine":4,"endColumn":31},{"ruleId":"113","severity":1,"message":"114","line":27,"column":7,"nodeType":"115","endLine":27,"endColumn":68,"suggestions":"116"},{"ruleId":"108","severity":1,"message":"117","line":12,"column":19,"nodeType":"110","messageId":"111","endLine":12,"endColumn":23},{"ruleId":"108","severity":1,"message":"118","line":12,"column":24,"nodeType":"110","messageId":"111","endLine":12,"endColumn":30},{"ruleId":"119","severity":1,"message":"120","line":52,"column":1,"nodeType":"121","endLine":54,"endColumn":2},{"ruleId":"108","severity":1,"message":"122","line":1,"column":10,"nodeType":"110","messageId":"111","endLine":1,"endColumn":20},{"ruleId":"108","severity":1,"message":"123","line":3,"column":8,"nodeType":"110","messageId":"111","endLine":3,"endColumn":13},{"ruleId":"108","severity":1,"message":"124","line":2,"column":25,"nodeType":"110","messageId":"111","endLine":2,"endColumn":30},{"ruleId":"108","severity":1,"message":"125","line":9,"column":12,"nodeType":"110","messageId":"111","endLine":9,"endColumn":26},{"ruleId":"108","severity":1,"message":"126","line":9,"column":27,"nodeType":"110","messageId":"111","endLine":9,"endColumn":37},{"ruleId":"108","severity":1,"message":"127","line":9,"column":38,"nodeType":"110","messageId":"111","endLine":9,"endColumn":44},{"ruleId":"108","severity":1,"message":"128","line":1,"column":10,"nodeType":"110","messageId":"111","endLine":1,"endColumn":17},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"@typescript-eslint/no-unused-vars","'group' is defined but never used.","Identifier","unusedVar","'Segment' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'activity.id.length'. Either include it or remove the dependency array.","ArrayExpression",["131"],"'data' is assigned a value but never used.","'config' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'observable' is defined but never used.","'React' is defined but never used.","'Label' is defined but never used.","'deleteActivity' is assigned a value but never used.","'submitting' is assigned a value but never used.","'target' is assigned a value but never used.","'observe' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},"Update the dependencies array to be: [LoadActivity, clearActivity, match.params.id, initialFormState, activity.id.length]",{"range":"134","text":"135"},[1031,1092],"[LoadActivity, clearActivity, match.params.id, initialFormState, activity.id.length]"]