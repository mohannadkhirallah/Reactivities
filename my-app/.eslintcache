[{"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\index.tsx":"1","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\reportWebVitals.ts":"2","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\nav\\NavBar.tsx":"4","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityDashboard.tsx":"5","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityList.tsx":"6","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetails.tsx":"7","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\form\\ActivityForm.tsx":"8","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\api\\agent.ts":"9","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\LoadingCompnent.tsx":"10","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\activityStore.ts":"11","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\models\\activity.ts":"12","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\home\\HomePage.tsx":"13","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\ScrollToTop.tsx":"14","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityListItem.tsx":"15","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedHeader.tsx":"16","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedInfo.tsx":"17","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedChat.tsx":"18","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedSideBar.tsx":"19","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\NotFound.tsx":"20","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\TextInput.tsx":"21","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\TextAreaInput.tsx":"22","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\SelectInput.tsx":"23","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\categoryOptionsts.ts":"24","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\rootStore.ts":"25","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\userStore.ts":"26","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\user\\LoginForm.tsx":"27","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\commonStore.ts":"28","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\modalStore.ts":"29","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\modals\\ModalContainer.tsx":"30","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\ErrorMessage.tsx":"31","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\ErrorMessageViewer.tsx":"32","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\user\\RegisterForm.tsx":"33","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityListItemAttendees.tsx":"34","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfilePage.tsx":"35","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfileHeader.tsx":"36","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfileContent.tsx":"37","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\profileStore.ts":"38","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfilePhotos.tsx":"39","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\photoUpload\\PhotoUploadWidget.tsx":"40","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\photoUpload\\PhotoWidgetDropZone.tsx":"41","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\photoUpload\\PhotoWidgetCropper.tsx":"42"},{"size":1017,"mtime":1612528031235,"results":"43","hashOfConfig":"44"},{"size":425,"mtime":499162500000,"results":"45","hashOfConfig":"44"},{"size":2403,"mtime":1615566128141,"results":"46","hashOfConfig":"44"},{"size":1664,"mtime":1615565362191,"results":"47","hashOfConfig":"44"},{"size":1151,"mtime":1614346984706,"results":"48","hashOfConfig":"44"},{"size":1150,"mtime":1614346809910,"results":"49","hashOfConfig":"44"},{"size":1754,"mtime":1615751055966,"results":"50","hashOfConfig":"44"},{"size":4557,"mtime":1614960232642,"results":"51","hashOfConfig":"44"},{"size":3767,"mtime":1615750012758,"results":"52","hashOfConfig":"44"},{"size":334,"mtime":1610100944050,"results":"53","hashOfConfig":"44"},{"size":7949,"mtime":1614965075366,"results":"54","hashOfConfig":"44"},{"size":523,"mtime":1613216374050,"results":"55","hashOfConfig":"44"},{"size":1759,"mtime":1614404470994,"results":"56","hashOfConfig":"44"},{"size":313,"mtime":1610716654069,"results":"57","hashOfConfig":"44"},{"size":2637,"mtime":1615565315236,"results":"58","hashOfConfig":"44"},{"size":2607,"mtime":1615565519281,"results":"59","hashOfConfig":"44"},{"size":1745,"mtime":1610813377424,"results":"60","hashOfConfig":"44"},{"size":2454,"mtime":1610813644337,"results":"61","hashOfConfig":"44"},{"size":1966,"mtime":1614963788884,"results":"62","hashOfConfig":"44"},{"size":629,"mtime":1611308813871,"results":"63","hashOfConfig":"44"},{"size":666,"mtime":1612523374988,"results":"64","hashOfConfig":"44"},{"size":687,"mtime":1612524062855,"results":"65","hashOfConfig":"44"},{"size":777,"mtime":1612526412650,"results":"66","hashOfConfig":"44"},{"size":346,"mtime":1612526054038,"results":"67","hashOfConfig":"44"},{"size":851,"mtime":1615568342698,"results":"68","hashOfConfig":"44"},{"size":1872,"mtime":1614958715100,"results":"69","hashOfConfig":"44"},{"size":1886,"mtime":1614403959428,"results":"70","hashOfConfig":"44"},{"size":832,"mtime":1614958221173,"results":"71","hashOfConfig":"44"},{"size":591,"mtime":1614403420256,"results":"72","hashOfConfig":"44"},{"size":565,"mtime":1614403341623,"results":"73","hashOfConfig":"44"},{"size":454,"mtime":1614363542997,"results":"74","hashOfConfig":"44"},{"size":777,"mtime":1614405445809,"results":"75","hashOfConfig":"44"},{"size":2125,"mtime":1614405074789,"results":"76","hashOfConfig":"44"},{"size":695,"mtime":1614959222449,"results":"77","hashOfConfig":"44"},{"size":1248,"mtime":1615748703641,"results":"78","hashOfConfig":"44"},{"size":1705,"mtime":1615569191625,"results":"79","hashOfConfig":"44"},{"size":862,"mtime":1615573287493,"results":"80","hashOfConfig":"44"},{"size":3754,"mtime":1615751340352,"results":"81","hashOfConfig":"44"},{"size":3120,"mtime":1615751527470,"results":"82","hashOfConfig":"44"},{"size":2048,"mtime":1615749730541,"results":"83","hashOfConfig":"44"},{"size":1197,"mtime":1615575296169,"results":"84","hashOfConfig":"44"},{"size":1271,"mtime":1615747740466,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"q2xiso",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"88"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"88"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"88"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"88"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"88"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"88"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"88"},"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\index.tsx",[],["193","194"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\reportWebVitals.ts",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\App.tsx",["195","196","197","198"],"import React ,{Fragment, useContext, useEffect} from  'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from '../../feature/nav/NavBar';\nimport ActivityDashboard from '../../feature/activities/dashboard/ActivityDashboard';\nimport {observer} from 'mobx-react-lite';\nimport { Route,RouteComponentProps,Router,Switch,withRouter } from 'react-router-dom';\nimport { HomePage } from '../../feature/home/HomePage';\nimport { ActivityForm } from '../../feature/activities/form/ActivityForm';\nimport { ActivityDetails } from '../../feature/activities/details/ActivityDetails';\nimport NotFound from './NotFound';\nimport { ToastContainer } from 'react-toastify';\nimport LoginForm from '../../feature/user/LoginForm';\nimport { RootStoreContext } from '../stores/rootStore';\nimport { getuid } from 'process';\nimport { LoadingCompnent } from './LoadingCompnent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport {ProfilePage} from '../../feature/profiles/ProfilePage'\n\nconst App:React.FC<RouteComponentProps> = ({location}) => {\n\n  const rootStore=useContext(RootStoreContext);\n  const {setAppLoaded,token,appLoaded} =rootStore.commonStore;\n  const {getUser} = rootStore.userStore;\n\n  useEffect(()=>{\n    if(token)\n    {\n      getUser().finally(()=>setAppLoaded())\n    }\n    else\n    {\n      setAppLoaded()\n    }\n  },[getUser,setAppLoaded,token])\n\n \n\n    return (\n      <Fragment>\n        <ModalContainer></ModalContainer>\n        <ToastContainer position='top-right'/> \n        <Route exact path='/' component={HomePage} />\n        <Route path={'/(.+)'} render={() => (\n                <Fragment>\n                 <NavBar />\n                 <Container style={{marginTop:'7em'}}>\n                   <Switch>\n                    <Route exact path='/activities' component={ActivityDashboard}/>\n                    <Route  path='/activities/:id' component={ActivityDetails}/>\n                    <Route key={location.key} path= {['/createActivity','/manage/:id']} component={ActivityForm}/>\n                    <Route path='/profile/:username' component={ProfilePage}/>\n                    <Route path='/login' component={LoginForm}/>\n                    <Route component={NotFound}/>\n                   </Switch>\n                 </Container>\n                 \n                 </Fragment>\n        )}></Route>\n      </Fragment>\n    );\n}\nexport default withRouter(observer(App));\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\nav\\NavBar.tsx",["199","200"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport {  Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, DropdownMenu, Image, Menu } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\n\r\n\r\nexport const NavBar:React.FC = () => {\r\n    const rootStore= useContext(RootStoreContext);\r\n    const {isLoggedIn,user,logout} = rootStore.userStore;\r\n    return (\r\n        <Menu fixed='top' inverted>\r\n            <Container>\r\n            <Menu.Item header as ={NavLink} exact to='/' >\r\n                <img src=\"/assets/logo.png\" alt=\"logo\"style={{marginRight:10}} ></img> Reactivities\r\n            </Menu.Item>\r\n            <Menu.Item  name='Activities' as={NavLink} to ='/activities'/>\r\n            <Menu.Item >\r\n                <Button as={NavLink} to='/createActivity' positive content='Create Activity'></Button>\r\n            </Menu.Item>\r\n            {user && (\r\n                    <Menu.Item position='right'>\r\n                      <Image avatar spaced='right' src={user.imgae ||'/assets/user.png'} />\r\n                      <Dropdown pointing='top left' text={user.displayName}>\r\n                        <Dropdown.Menu>\r\n                          <Dropdown.Item as={Link} to={`/profile/${user.username}`} text='My profile' icon='user'/>\r\n                           <Dropdown.Item  onClick={logout} text='Logout' icon='power' /> \r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </Menu.Item>)}\r\n                    </Container>\r\n                    </Menu>\r\n\r\n    )\r\n};\r\nexport default observer( NavBar);","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityDashboard.tsx",["201","202"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect } from 'react'\r\nimport { Grid, GridColumn } from 'semantic-ui-react';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport { LoadingCompnent } from '../../../app/layout/LoadingCompnent';\r\nimport { RootStore, RootStoreContext } from '../../../app/stores/rootStore';\r\n\r\nexport const ActivityDashboard :React.FC = () => {\r\n    // const activityStore = useContext(ActivityStore);\r\n    const rootStore= useContext(RootStoreContext);\r\n    const activityStore = rootStore.activityStore;\r\n\r\n \r\n    useEffect(() => {\r\n       activityStore.loadActivities();\r\n       },[activityStore]);\r\n     \r\n     if(activityStore.loadingInitial) return <LoadingCompnent content='Loading activites...'></LoadingCompnent>;\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10} >\r\n                <ActivityList />\r\n            </Grid.Column>\r\n            <GridColumn width={6}>\r\n               <h2>Activity filters</h2>\r\n            </GridColumn>\r\n        </Grid>\r\n    )\r\n}\r\nexport default observer(ActivityDashboard) ;","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityList.tsx",["203","204","205"],"import { group } from 'console';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { Fragment, useContext } from 'react'\r\nimport { Item , Label, Segment} from 'semantic-ui-react';\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport { ActivityListItem } from './ActivityListItem';\r\n\r\nexport const ActivityList:React.FC = () => {\r\n    const rootStore= useContext(RootStoreContext);\r\n    const activityStore = rootStore.activityStore;\r\n    // const activityStore= useContext(ActivityStore);\r\n    const {activitiesByDate} =activityStore;\r\n    return (\r\n        <Fragment>\r\n          {activitiesByDate.map(([group,activities])=>(\r\n            <Fragment key={group}>\r\n              <Label size='large' color='blue'>{group}</Label>\r\n                <Item.Group divided>\r\n                  {activities.map(activity =>(\r\n                <ActivityListItem activity={activity} ></ActivityListItem>\r\n                ))}\r\n                </Item.Group>\r\n            </Fragment>\r\n          ))}\r\n\r\n      </Fragment>\r\n\r\n\r\n    )\r\n}\r\nexport default observer(ActivityList);","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetails.tsx",["206"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\form\\ActivityForm.tsx",["207","208","209","210"],"import React,{FormEvent, useContext, useEffect, useState} from 'react'\r\nimport { Button, Form, Grid, GridColumn, Segment } from 'semantic-ui-react'\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport {v4 as uuid} from 'uuid';\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Form as FinalForm, Field} from 'react-final-form';\r\nimport TextInput from '../../../app/common/form/TextInput';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\nimport { SelectInput } from '../../../app/common/form/SelectInput';\r\nimport { category } from '../../../app/common/form/categoryOptionsts';\r\nimport {combineValidators, composeValidators, hasLengthBetween, hasLengthGreaterThan, isRequired} from 'revalidate';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\n\r\n\r\nconst validate=combineValidators({\r\n\r\n    title:isRequired({message:'Event title is requied'}),\r\n    category: isRequired('Category'),\r\n    description: composeValidators(isRequired('description'),\r\n    hasLengthGreaterThan(4)({message:'Description needs to be at least 5 charachters'}))(),\r\n    city:isRequired('City'),\r\n    date:isRequired('Date'),\r\n    venue:isRequired('Venue')\r\n\r\n\r\n})\r\n\r\n\r\ninterface DetailsParams\r\n{\r\n    id:string\r\n}\r\n\r\nexport const ActivityForm:React.FC<RouteComponentProps<DetailsParams>> = ({history,match}) => {\r\n\r\n    const rootStore= useContext(RootStoreContext);\r\n    const activityStore = rootStore.activityStore;\r\n    // const activityStore= useContext(ActivityStore);\r\n    const {createActivity,editActivity,submitting,selectedActivity:initialFormState,LoadActivity,clearActivity}= activityStore;\r\n\r\n    useEffect(()=>{\r\n        if(match.params.id && activity.id.length ===0)\r\n        {\r\n            LoadActivity(match.params.id).then(\r\n                ()=> initialFormState && setActivity(initialFormState));\r\n        }\r\n        return () =>{\r\n            clearActivity();\r\n        }\r\n    },[LoadActivity,clearActivity,match.params.id,initialFormState]);\r\n    // OLD code \r\n    const [activity,setActivity]=useState<IActivity>({\r\n        id:'',\r\n        title:'',\r\n        category:'',\r\n        date:'',\r\n        city:'',\r\n        venue:'',\r\n        description:'' ,\r\n        attendees:[],\r\n        isGoing:false,\r\n        isHost:false,\r\n    });\r\n\r\n    const handleInputChange=(event:FormEvent<HTMLInputElement|HTMLTextAreaElement>)=>{\r\n        const{name,value} =event.currentTarget;\r\n        setActivity({...activity,[name]:value});\r\n    };\r\n\r\n\r\n    const handleFinalFormSubmit = (values:any)=>{\r\n        if(activity.id.length ===0)\r\n        {\r\n            let newActivity={\r\n                ...activity,\r\n                id:uuid()\r\n            }\r\n            createActivity(newActivity).then(()=>history.push(`/activities/${newActivity.id}`));\r\n        }\r\n        else{\r\n            editActivity(activity).then(()=>history.push(`/activities/${activity.id}`));\r\n        }\r\n        console.log(values);\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <GridColumn width={10}>\r\n            <Segment clearing>\r\n                <FinalForm\r\n                validate={validate}\r\n                onSubmit={handleFinalFormSubmit}\r\n                initialValues={activity}\r\n                render={({handleSubmit, invalid,pristine})=> (\r\n                <Form onSubmit={handleSubmit}>\r\n                <Field component={TextInput}  name='title' placeholder='Title' value={activity.title} />\r\n                <Field component={TextAreaInput} rows={3} name='description' placeholder='Description' value={activity.description} />\r\n                <Field component={SelectInput} options={category} name='category' placeholder='Catgeory' value={activity.category}/>\r\n                <Field component={TextInput} type='Date' name='date'  placeholder='Date' value={activity.date} />\r\n                <Field component={TextInput} name='city' placeholder='City' value={activity.city}/>\r\n                <Field component={TextInput} name='venue' placeholder='Venue' value={activity.venue}/>\r\n                <Button loading={submitting} floated='right' positive type='submit' content='Submit' disabled={invalid || pristine}/>\r\n                <Button floated='right' type='button' content='Cancel' onClick={()=> history.push('/activities')}/>\r\n            </Form>\r\n                )}/>\r\n        </Segment>\r\n            </GridColumn>\r\n        </Grid>\r\n      \r\n    );\r\n}\r\nexport default observer(ActivityForm);","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\api\\agent.ts",["211","212","213","214","215"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\LoadingCompnent.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\activityStore.ts",["216","217","218","219","220","221"],"import { ca, tr } from \"date-fns/locale\";\r\nimport { observable, action,makeAutoObservable,computed,configure,runInAction } from \"mobx\";\r\nimport { createContext, SyntheticEvent } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport agent from \"../api/agent\";\r\nimport {IActivity} from '../models/activity'\r\nimport { IAttendee } from \"../models/attendee\";\r\nimport { RootStore } from \"./rootStore\";\r\n\r\n\r\n\r\nexport default class ActivityStore{\r\n\r\n    rootStore: RootStore;\r\n\r\n    constructor(rootStore:RootStore)\r\n    {\r\n        this.rootStore=rootStore;\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    activityRegistry = new Map();\r\n    loadingInitial = false;\r\n    selectedActivity:IActivity |undefined;\r\n    submitting =false;\r\n    target='';\r\n    loading =false;\r\n\r\n    // constructor() {\r\n    //     makeAutoObservable(this)\r\n    // }\r\n\r\n    @computed get activitiesByDate(){\r\n        console.log(this.groupActivitiesByDate( Array.from( this.activityRegistry.values())));\r\n        return this.groupActivitiesByDate( Array.from( this.activityRegistry.values()));\r\n    }; \r\n    \r\n    groupActivitiesByDate( activities:IActivity[])\r\n    {\r\n        const sortedActivities= activities.sort((a,b) => Date.parse(a.date) - Date.parse(b.date));\r\n        return Object.entries(sortedActivities.reduce((activities,activity)=>{\r\n            const date=activity.date.split('T')[0];\r\n            activities[date] =activities[date]?[...activities[date],activity]:[activity];\r\n            return activities;\r\n        },{}as {[key:string]:IActivity[]}));\r\n\r\n    }\r\n\r\n    @action loadActivities = async() => {\r\n        this.loadingInitial=true;\r\n        const user = this.rootStore.userStore.user!;\r\n        try\r\n        {\r\n            const activities= await agent.Activities.list();\r\n            runInAction( ()=>{\r\n                activities.forEach(actvity=>{\r\n                    actvity.date=actvity.date.split('.')[0];\r\n                    actvity.isGoing= actvity.attendees.some(\r\n                        a =>a.username === user.username\r\n                    )\r\n                    actvity.isHost = actvity.attendees.some(\r\n                        a =>a.username === user.username && a.isHost\r\n                    )\r\n                    this.activityRegistry.set(actvity.id,actvity);\r\n                  });\r\n                  this.loadingInitial=false;\r\n            });\r\n        }\r\n        catch(error)\r\n        {\r\n            console.log(error);\r\n            runInAction(()=>{\r\n                this.loadingInitial=false;\r\n            })\r\n        }\r\n    };\r\n\r\n    @action LoadActivity =async (id:string) =>\r\n    {\r\n        // Getting atcivity from the activity list \r\n        // Or get activity from Data base that does does exist in the dashboard or refresh the page (no activity in the regirsty)\r\n        let activity= this.getActivity(id) as IActivity;\r\n        const user = this.rootStore.userStore.user!;\r\n        if(activity) {\r\n            this.selectedActivity=activity;\r\n        }\r\n       else\r\n       {\r\n            this.loadingInitial=true;\r\n            try\r\n            {\r\n                activity = await agent.Activities.details(id);\r\n                runInAction(()=>{\r\n                    \r\n                    activity.isGoing= activity.attendees.some(\r\n                        a => a.username === user.username\r\n                    )\r\n                    activity.isHost = activity.attendees.some(\r\n                        a => a.username === user.username && a.isHost\r\n                    )\r\n                    this.selectedActivity=activity;\r\n                    this.loadingInitial=false;\r\n        \r\n                });\r\n            }\r\n            catch (ex)\r\n            {\r\n                console.log(ex);\r\n                runInAction(()=>{\r\n                    this.loadingInitial=false;\r\n                });\r\n            }\r\n       } \r\n\r\n    };\r\n\r\n    @action clearActivity=()=>{\r\n\r\n        this.selectedActivity=undefined;\r\n    };\r\n\r\n    getActivity =(id:string) =>{\r\n        return this.activityRegistry.get(id);\r\n    };\r\n\r\n    @action createActivity =async (activity:IActivity)=>\r\n    {\r\n        this.submitting=true;\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const user = this.rootStore.userStore.user!;\r\n            const attende:IAttendee ={\r\n            displayName:user.displayName,\r\n            isHost:true,\r\n            username :user.username, \r\n            image : user.imgae!\r\n            };\r\n            let attendees=[];\r\n            attendees.push(attende);\r\n            activity.attendees=attendees;\r\n            runInAction(()=>{\r\n                this.activityRegistry.set(activity.id,activity);\r\n                this.submitting=false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            toast.error('problem submitting data');\r\n            runInAction(()=>{\r\n                this.submitting=false;\r\n            })\r\n        }\r\n\r\n    };\r\n    @action editActivity = async(activity:IActivity)=>{\r\n\r\n        this.submitting= true;\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(()=>{\r\n\r\n                this.activityRegistry.set(activity.id,activity);\r\n                this.selectedActivity=activity;\r\n                this.submitting=false;\r\n            })\r\n\r\n        } catch (error) {\r\n            runInAction(()=>{\r\n                this.submitting=false;\r\n            })\r\n            toast.error('problem submitting data');\r\n            console.log(error);\r\n        }\r\n\r\n    };\r\n\r\n    @action deleteActivity = async (event:SyntheticEvent<HTMLButtonElement>,id:string) =>{\r\n\r\n        this.submitting=true;\r\n        try {\r\n\r\n            this.target=event.currentTarget.name;\r\n            await agent.Activities.delete(id);\r\n            runInAction(()=>{\r\n                this.activityRegistry.delete(id);\r\n                this.submitting=false;\r\n            })\r\n \r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(()=>{\r\n                this.submitting=false;\r\n            })\r\n\r\n        }\r\n    };\r\n\r\n    @action attendActivity = async () =>{\r\n        const user = this.rootStore.userStore.user!;\r\n        const attende:IAttendee ={\r\n            displayName:user.displayName,\r\n            isHost:false,\r\n            username :user.username, \r\n            image : user.imgae!\r\n        };\r\n        this.loading=true;\r\n        try\r\n        {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(()=>{\r\n                if(this.selectedActivity)\r\n                {\r\n                    this.selectedActivity.attendees.push(attende);\r\n                    this.selectedActivity.isGoing=true;\r\n                    this.activityRegistry.set(this.selectedActivity.id,this.selectedActivity);\r\n                    this.loading=false;\r\n                }     \r\n            })\r\n        } \r\n        catch(error)\r\n        {\r\n            runInAction(()=>{\r\n                this.loading=false;\r\n            })\r\n            toast.error('Problem singing up to activity');\r\n        } \r\n       \r\n    }\r\n    @action cancelAttendance =async () =>\r\n    {\r\n        try\r\n        {\r\n            await agent.Activities.unattend(this.selectedActivity!.id);\r\n            runInAction(()=>{\r\n                \r\n         if(this.selectedActivity)\r\n                {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees.filter (a=>a.username ! == this.rootStore.userStore.user!.username);\r\n                    this.selectedActivity.isGoing=false;\r\n                    this.activityRegistry.set(this.selectedActivity.id,this.selectedActivity);\r\n                }\r\n            })\r\n        }\r\n        catch(error)\r\n        {\r\n            runInAction(()=>{\r\n                this.loading=false;\r\n            })\r\n            toast.error('Problem singing up to activity');\r\n        }\r\n        \r\n    }\r\n\r\n}","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\models\\activity.ts",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\home\\HomePage.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\ScrollToTop.tsx",["222"],"import {useEffect} from 'react';\r\nimport {withRouter} from 'react-router-dom'\r\nimport React from 'react'\r\n\r\n const ScrollToTop = ({children, location:{pathname}}:any) => {\r\n    useEffect(()=>{\r\n        window.scrollTo(0,0);\r\n    },[pathname]);\r\n\r\n    return children;\r\n}\r\nexport default withRouter(ScrollToTop);\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityListItem.tsx",["223","224","225","226"],"import React, { useContext } from 'react';\r\nimport { Item , Button, Label, Segment, Icon} from 'semantic-ui-react';\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport { Link } from 'react-router-dom';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport { ActivityListItemAttendees } from './ActivityListItemAttendees';\r\n\r\nexport const ActivityListItem:React.FC<{activity:IActivity}> = ({activity}) => {\r\n    const host = activity.attendees.filter( x=> x.isHost)[0];\r\n\r\n    const rootStore= useContext(RootStoreContext);\r\n    const activityStore = rootStore.activityStore;\r\n    // const activityStore= useContext(ActivityStore);\r\n    const {deleteActivity,submitting,target} =activityStore;\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group>\r\n                        <Item>\r\n                        <Item.Image size='tiny' circular src={'/assets/user.png' || host.image} style={{marginBottom:3}}/>\r\n                        <Item.Content>\r\n                        <Item.Header as={Link} to={`/activities/${activity.id}`}>{activity.title}</Item.Header>\r\n                        <Item.Description> Hosted by <Link to={`/profile/${host.username}`}>{host.displayName}</Link> </Item.Description>\r\n                        {activity.isHost &&\r\n                        <Item.Description>\r\n                        <Label basic color='orange'\r\n                        content='You are hosting this activity' />\r\n                         </Item.Description>\r\n                        }\r\n\r\n                        {activity.isGoing && !activity.isHost &&\r\n                        <Item.Description>\r\n                        <Label basic color='green'\r\n                        content='You are going to this activity' />\r\n                         </Item.Description>\r\n                        }\r\n                        </Item.Content>\r\n                        </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <Icon name='clock'/>{activity.date}\r\n                <Icon name='marker'/>{activity.venue}, {activity.city}\r\n            </Segment>\r\n            <Segment secondary>\r\n               <ActivityListItemAttendees attendees ={activity.attendees}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button as={Link} to ={`/activities/${activity.id}`} floated='right' content='View' color='blue'></Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n        \r\n    )\r\n}\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedHeader.tsx",["227"],"import { observe } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Item, Header, Button,Image } from 'semantic-ui-react'\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\n\r\nconst activityImageStyle = {\r\n  filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n  position: 'absolute',\r\n  bottom: '5%',\r\n  left: '5%',\r\n  width: '100%',\r\n  height: 'auto',\r\n  color: 'white'\r\n};\r\nexport const ActivityDetailedHeader :React.FC<{activity:IActivity}> = ({activity}) => {\r\n\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {cancelAttendance,attendActivity,loading}= rootStore.activityStore;\r\n    const host = activity.attendees.filter( x=> x.isHost)[0];\r\n    return (\r\n            <Segment.Group>\r\n              <Segment basic attached='top' style={{ padding: '0' }}>\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment basic style={activityImageTextStyle}>\r\n                  <Item.Group>\r\n                    <Item>\r\n                      <Item.Content>\r\n                        <Header\r\n                          size='huge'\r\n                          content={activity.title}\r\n                          style={{ color: 'white' }}\r\n                        />\r\n                        <p>{activity.date}</p>\r\n                        <p>\r\n                          Hosted by <Link to={`/profile/${host.username}`}>\r\n                          <strong>{host.displayName}</strong>\r\n                          </Link> \r\n                        </p>\r\n                      </Item.Content>\r\n                    </Item>\r\n                  </Item.Group>\r\n                </Segment>\r\n              </Segment>\r\n              <Segment clearing attached='bottom'> \r\n              {activity.isHost ? \r\n                (\r\n\r\n                  <Button as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'>\r\n                  Manage Event\r\n                  </Button>\r\n                ):activity.isGoing ? (\r\n                  <Button loading={loading} onClick={cancelAttendance}>Cancel attendance</Button>\r\n                ):\r\n                (\r\n                  <Button loading={loading} onClick={attendActivity} color='teal'>Join Activity</Button>\r\n                )\r\n              }\r\n              </Segment>\r\n            </Segment.Group>\r\n    )\r\n}\r\nexport default observer (ActivityDetailedHeader);\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedInfo.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedChat.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedSideBar.tsx",["228","229"],"import { observe } from 'mobx'\r\nimport { observer, Observer } from 'mobx-react-lite'\r\nimport React, { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, List, Item, Label,Image } from 'semantic-ui-react'\r\nimport { IAttendee } from '../../../app/models/attendee'\r\n\r\ninterface IProps {\r\n  attendees:IAttendee[]\r\n}\r\nexport const ActivityDetailedSideBar:React.FC<IProps> = ({attendees}) => {\r\n\r\n  const isHost=false;\r\n    return (\r\n            <Fragment>\r\n              <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n              >\r\n                {attendees.length} {attendees.length ===1 ?'Person':'People'} going\r\n              </Segment>\r\n              <Segment attached>\r\n                <List relaxed divided>\r\n                  {attendees.map((attende) =>(\r\n                    <Item key={attende.username} style={{ position: 'relative' }}>\r\n                      {isHost &&\r\n                      <Label\r\n                        style={{ position: 'absolute' }}\r\n                        color='orange'\r\n                        ribbon='right'\r\n                      >\r\n                        Host\r\n                      </Label>\r\n                    }\r\n                    <Image size='tiny' src={'/assets/user.png'} />\r\n                    <Item.Content verticalAlign='middle'>\r\n                      <Item.Header as='h3'>\r\n                        <Link to={`/profile/${attende.username}`}>{attende.displayName}</Link>\r\n                      </Item.Header>\r\n                      <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                    </Item.Content>\r\n                  </Item>\r\n                  ))}\r\n                </List>\r\n              </Segment>\r\n            </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetailedSideBar);","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\NotFound.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\TextInput.tsx",["230","231"],"import React from 'react'\r\nimport { FieldRenderProps, Form as FinalForm } from 'react-final-form'\r\nimport { FormField, FormFieldProps, Label , Form} from 'semantic-ui-react'\r\n\r\n\r\ninterface IProps extends FieldRenderProps<string,HTMLElement>,FormFieldProps\r\n{\r\n\r\n}\r\n\r\nexport const TextInput:React.FC<IProps> = ({input,width,type, placeholder, meta:{touched,error} }) => {\r\n\r\n return( \r\n    <Form.Field error={touched && !!error} type={type} width={width}>\r\n     <input {...input} placeholder={placeholder}>\r\n     </input>\r\n     {touched && error && (\r\n        <Label basic color='red'>{error}</Label>\r\n     )}\r\n    </Form.Field>\r\n )\r\n};\r\n\r\nexport default TextInput;\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\TextAreaInput.tsx",["232","233"],"import React from 'react'\r\nimport { FieldRenderProps, Form as FinalForm } from 'react-final-form'\r\nimport { FormField, FormFieldProps, Label , Form} from 'semantic-ui-react'\r\n\r\ninterface IProps extends FieldRenderProps<string,HTMLElement>,FormFieldProps\r\n{\r\n\r\n}\r\n\r\nexport const TextAreaInput: React.FC<IProps> = ({input, type, width, placeholder,rows , meta:{touched,error}}) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n        <textarea rows={rows} {...input} placeholder={placeholder}/>\r\n        {touched && error && (\r\n           <Label basic color='red'>{error}</Label>\r\n        )}\r\n       </Form.Field>\r\n    )\r\n}\r\nexport default TextAreaInput;","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\SelectInput.tsx",["234","235"],"import React from 'react'\r\nimport { FieldRenderProps, Form as FinalForm } from 'react-final-form'\r\nimport { FormField, FormFieldProps, Label , Form, Select} from 'semantic-ui-react'\r\n\r\ninterface IProps extends FieldRenderProps<string,HTMLElement>,FormFieldProps\r\n{\r\n\r\n}\r\nexport const SelectInput:React.FC<IProps> = ({\r\n    input,\r\n    width,\r\n    options,\r\n    placeholder,\r\n    meta:{touched,error}\r\n\r\n}) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n        <Select value={input.value}\r\n        onChange={(e,data)=> input.onChange(data.value)}\r\n        placeholder={placeholder}\r\n        options={options}/>\r\n        {touched && error && (\r\n           <Label basic color='red'>{error}</Label>\r\n        )}\r\n       </Form.Field>\r\n    )\r\n}\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\categoryOptionsts.ts",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\rootStore.ts",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\userStore.ts",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\user\\LoginForm.tsx",["236","237","238","239"],"import { FORM_ERROR } from 'final-form';\r\nimport React, { useContext } from 'react'\r\nimport {Form as FinalForm,Field} from 'react-final-form'\r\nimport { combineValidators, isRequired } from 'revalidate';\r\nimport { Button, Form, Header, Label } from 'semantic-ui-react'\r\nimport { ErrorMessage } from '../../app/common/form/ErrorMessage';\r\nimport ErrorMessageViewer from '../../app/common/form/ErrorMessageViewer';\r\nimport TextInput from '../../app/common/form/TextInput'\r\nimport { IUserFormValues } from '../../app/models/user';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\n\r\n\r\nconst validate =combineValidators({\r\n    email:isRequired('email'),\r\n    password:isRequired('password')\r\n})\r\n\r\nexport const LoginForm = () => {\r\n    const rootStore= useContext(RootStoreContext);\r\n    const {login} = rootStore.userStore;\r\n    \r\n\r\n    return (\r\n        <FinalForm onSubmit={(values:IUserFormValues)=>login(values).catch(error=>({\r\n            [FORM_ERROR]:error\r\n        }))}\r\n        validate={validate}\r\n        \r\n        render ={({handleSubmit,submitting,form,submitError,invalid,pristine,dirtySinceLastSubmit})=>(\r\n            <Form onSubmit={handleSubmit} error >\r\n                <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'></Header>\r\n                <Field name='email' component={TextInput} placeholder=\"Email\" />\r\n                <Field name=\"password\" component={TextInput} type=\"password\" placeholder=\"Password\"/>\r\n                {submitError && !dirtySinceLastSubmit && (<ErrorMessageViewer text='Invalid email or password' error={submitError}/>)}\r\n                <br/>\r\n                <Button disabled={invalid && !dirtySinceLastSubmit||pristine} loading={submitting} positive content=\"Login\" color='teal' fluid/>\r\n                \r\n            </Form>\r\n\r\n        )}\r\n        />\r\n\r\n    );\r\n};\r\nexport default LoginForm\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\commonStore.ts",["240"],"import { tr } from \"date-fns/locale\";\r\nimport { action, observable, reaction } from \"mobx\";\r\nimport { RootStore } from \"./rootStore\";\r\n\r\nexport default class CommonStore {\r\n    rootStore :RootStore;\r\n\r\n    constructor(rootStore:RootStore)\r\n    {\r\n        this.rootStore=rootStore;\r\n        reaction(()=>this.token,\r\n        token=> {\r\n            if(token)\r\n            {\r\n\r\n                window.localStorage.setItem('jwt',token);\r\n            }\r\n            else{\r\n                window.localStorage.removeItem('jwt');\r\n            }\r\n        })\r\n    }\r\n\r\n    @observable token:string |null=window.localStorage.getItem('jwt');\r\n    @observable appLoaded= false;\r\n\r\n    @action setToken=(token:string | null)=>{\r\n        this.token=token;\r\n       \r\n    }\r\n    @action setAppLoaded = ()=> {\r\n        this.appLoaded=true;\r\n    }\r\n}","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\modalStore.ts",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\modals\\ModalContainer.tsx",["241","242"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport { Button, Header, Modal } from 'semantic-ui-react'\r\nimport { RootStoreContext } from '../../stores/rootStore'\r\n\r\nexport const ModalContainer = () => {\r\n\r\n    const rootStore= useContext(RootStoreContext);\r\n    const {modal:{open,body},closeModal}= rootStore.modalStore;\r\n    return (\r\n        <Modal open={open} onClose={closeModal} size='mini'>\r\n      <Modal.Content > {body}\r\n          </Modal.Content>\r\n    </Modal>\r\n    )\r\n}\r\nexport default observer(ModalContainer);","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\ErrorMessage.tsx",["243"],"import { AxiosResponse } from 'axios'\r\nimport React from 'react'\r\nimport { Message } from 'semantic-ui-react'\r\n\r\ninterface IProps {\r\n    error:AxiosResponse,\r\n    text:string\r\n}\r\nexport const ErrorMessage:React.FC<IProps> = ({error,text}) => {\r\n    return (\r\n        <Message error>\r\n            <Message.Header>{error.statusText}</Message.Header>\r\n\r\n            {text &&<Message.Content content={text}></Message.Content>}\r\n        </Message>\r\n    )\r\n}\r\n",["244","245"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\ErrorMessageViewer.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\user\\RegisterForm.tsx",["246","247","248","249"],"import { FORM_ERROR } from 'final-form';\r\nimport React, { useContext } from 'react'\r\nimport {Form as FinalForm,Field} from 'react-final-form'\r\nimport { combineValidators, isRequired } from 'revalidate';\r\nimport { Button, Form, Header, Label } from 'semantic-ui-react'\r\nimport { ErrorMessage } from '../../app/common/form/ErrorMessage';\r\nimport ErrorMessageViewer from '../../app/common/form/ErrorMessageViewer';\r\nimport TextInput from '../../app/common/form/TextInput'\r\nimport { IUserFormValues } from '../../app/models/user';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\n\r\n\r\nconst validate =combineValidators({\r\n    email:isRequired('email'),\r\n    password:isRequired('password'),\r\n    username:isRequired('username'),\r\n    displayname:isRequired('displayname')\r\n})\r\n\r\nexport const RegisterForm = () => {\r\n    const rootStore= useContext(RootStoreContext);\r\n    const {register} = rootStore.userStore;\r\n    \r\n    return (\r\n        <FinalForm onSubmit={(values:IUserFormValues)=>register(values).catch(error=>({\r\n            [FORM_ERROR]:error\r\n        }))}\r\n\r\n        validate={validate}\r\n        render ={({handleSubmit,submitting,form,submitError,invalid,pristine,dirtySinceLastSubmit})=>(\r\n            <Form onSubmit={handleSubmit} error >\r\n                <Header as='h2' content='Signup to Reactivities' color='teal' textAlign='center'></Header>\r\n                <Field name='username' component={TextInput} placeholder=\"Username\" />\r\n                <Field name='displayname' component={TextInput} placeholder=\"Display Name\" />\r\n                <Field name='email' component={TextInput} placeholder=\"Email\" />\r\n                <Field name=\"password\" component={TextInput} type=\"password\" placeholder=\"Password\"/>\r\n                {submitError && !dirtySinceLastSubmit && (<ErrorMessageViewer  error={submitError}/>)}\r\n                <br/>\r\n                <Button disabled={invalid && !dirtySinceLastSubmit||pristine} loading={submitting} positive content=\"Register\" color='teal' fluid/>\r\n                \r\n            </Form>\r\n\r\n        )}\r\n        />\r\n\r\n    );\r\n};\r\nexport default RegisterForm\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityListItemAttendees.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfilePage.tsx",["250","251"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfileHeader.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfileContent.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\profileStore.ts",["252"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfilePhotos.tsx",["253","254"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\photoUpload\\PhotoUploadWidget.tsx",["255"],"import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Header, Grid, Image, Button } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport PhotoWidgetDropZone from './PhotoWidgetDropZone';\r\nimport { PhotoWidgetCropper } from './PhotoWidgetCropper';\r\n\r\ninterface IProps {\r\n  loading:boolean;\r\n  uploadPhoto:(file:Blob)=>void;\r\n}\r\n\r\nexport const PhotoUploadWidget:React.FC<IProps> = ({loading,uploadPhoto}) => {\r\n    const [files,setFiles] = useState<any[]>([]);\r\n    const [image, setImage] = useState<Blob|null>(null);\r\n\r\n    useEffect(() => {\r\n        return () =>{\r\n            files.forEach(file=> URL.revokeObjectURL(file.preview))\r\n        }\r\n    })\r\n\r\n    return (\r\n        <Fragment>\r\n        <Grid>\r\n      \r\n          <Grid.Column width={4}>\r\n            <Header color='teal' sub content='Step 1 - Add Photo' />\r\n            <PhotoWidgetDropZone setFiles={setFiles}/>\r\n          </Grid.Column>\r\n          <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n              <Header sub color='teal' content='Step 2 - Resize image' />\r\n              {\r\n              files.length > 0 && (\r\n                <PhotoWidgetCropper setImage={setImage} imagePreview={files[0].preview}/>\r\n              )\r\n              }\r\n          </Grid.Column>\r\n          <Grid.Column width={1} />\r\n          <Grid.Column width={4}>\r\n            <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n            {files.length >0 && \r\n            <Fragment>\r\n               <div className='img-preview' style={{minHeight: '200px', overflow: 'hidden' }} />\r\n               <Button.Group widths={2}>\r\n                 <Button positive icon='check' loading={loading} onClick={()=>uploadPhoto(image!)}/>\r\n                 <Button  icon='close' disabled={loading} onClick={()=>setFiles([])}/>\r\n                 \r\n               </Button.Group>\r\n            </Fragment>\r\n\r\n            }\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(PhotoUploadWidget);\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\photoUpload\\PhotoWidgetDropZone.tsx",["256"],"import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n    setFiles:(files:object[]) =>void\r\n}\r\n\r\nconst dropZoneStyle = {\r\n    border :'dashed 3px #eee',\r\n    borderColor:'#eee',\r\n    borderRadius:'5px',\r\n    paddingTop:'30px',\r\n    textAlign:'center' as 'center',\r\n    height :'200px'\r\n};\r\nconst dropzoneActive={\r\n    borderColor:'green'\r\n}\r\n\r\nconst  PhotoWidgetDropZone: React.FC<IProps> =({setFiles}) => {\r\n  const onDrop = useCallback(acceptedFiles => {\r\n   setFiles(acceptedFiles.map((file:object)=> Object.assign(file,{\r\n    //  this may lead to memory leak problem since we keep store url for image when ever to upload images wihtout cleaning them\r\n       preview:URL.createObjectURL(file)\r\n   })))\r\n  }, [])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ?{...dropZoneStyle,...dropzoneActive}:dropZoneStyle} >\r\n      <input {...getInputProps()} />\r\n        <Icon name='upload' size='huge'/>\r\n        <Header content='Drop image here'/>\r\n    </div>\r\n  )\r\n}\r\nexport default PhotoWidgetDropZone","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\photoUpload\\PhotoWidgetCropper.tsx",["257"],"\r\nimport React, {Component, useRef} from 'react';\r\nimport Cropper from 'react-cropper';\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\ninterface IProps\r\n{\r\n    setImage:(file:Blob) =>void;\r\n    imagePreview:string;\r\n}\r\n\r\nexport const PhotoWidgetCropper:React.FC<IProps> = ({setImage,imagePreview}) => {\r\n    // const cropper =useRef<Cropper>(null);\r\n    const cropper =useRef<Cropper>(null);\r\n    const cropperRef = useRef<HTMLImageElement>(null);\r\n\r\n    const cropImage =()=> {\r\n        if(cropper.current &&\r\n             typeof cropper.current.getCroppedCanvas() ==='undefined')\r\n        {\r\n            return;\r\n        }\r\n        cropper && cropper.current && cropper.current.getCroppedCanvas().toBlob((blob:any)=>\r\n        {\r\n            setImage(blob);\r\n        },'image/jpeg')\r\n    }\r\n    return (\r\n        <Cropper\r\n            ref={cropperRef}\r\n            src={imagePreview}\r\n             style={{height: 200, width: '100%'}}\r\n            // Cropper.js options\r\n            preview='.img-preview'\r\n            aspectRatio={1 / 1}\r\n            guides={false}\r\n            viewMode={1}\r\n            dragMode='move'\r\n            scalable={true}\r\n            cropBoxMovable={true}\r\n            cropBoxResizable={true}\r\n            crop ={cropImage}\r\n       />\r\n    )\r\n}\r\n",{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","severity":1,"message":"263","line":6,"column":36,"nodeType":"264","messageId":"265","endLine":6,"endColumn":42},{"ruleId":"262","severity":1,"message":"266","line":14,"column":10,"nodeType":"264","messageId":"265","endLine":14,"endColumn":16},{"ruleId":"262","severity":1,"message":"267","line":15,"column":10,"nodeType":"264","messageId":"265","endLine":15,"endColumn":25},{"ruleId":"262","severity":1,"message":"268","line":22,"column":29,"nodeType":"264","messageId":"265","endLine":22,"endColumn":38},{"ruleId":"262","severity":1,"message":"269","line":4,"column":39,"nodeType":"264","messageId":"265","endLine":4,"endColumn":51},{"ruleId":"262","severity":1,"message":"270","line":10,"column":12,"nodeType":"264","messageId":"265","endLine":10,"endColumn":22},{"ruleId":"262","severity":1,"message":"271","line":5,"column":8,"nodeType":"264","messageId":"265","endLine":5,"endColumn":21},{"ruleId":"262","severity":1,"message":"272","line":7,"column":10,"nodeType":"264","messageId":"265","endLine":7,"endColumn":19},{"ruleId":"262","severity":1,"message":"273","line":1,"column":10,"nodeType":"264","messageId":"265","endLine":1,"endColumn":15},{"ruleId":"262","severity":1,"message":"274","line":4,"column":24,"nodeType":"264","messageId":"265","endLine":4,"endColumn":31},{"ruleId":"262","severity":1,"message":"271","line":5,"column":8,"nodeType":"264","messageId":"265","endLine":5,"endColumn":21},{"ruleId":"262","severity":1,"message":"271","line":6,"column":8,"nodeType":"264","messageId":"265","endLine":6,"endColumn":21},{"ruleId":"262","severity":1,"message":"271","line":5,"column":8,"nodeType":"264","messageId":"265","endLine":5,"endColumn":21},{"ruleId":"262","severity":1,"message":"275","line":13,"column":47,"nodeType":"264","messageId":"265","endLine":13,"endColumn":63},{"ruleId":"276","severity":1,"message":"277","line":52,"column":7,"nodeType":"278","endLine":52,"endColumn":68,"suggestions":"279"},{"ruleId":"262","severity":1,"message":"280","line":67,"column":11,"nodeType":"264","messageId":"265","endLine":67,"endColumn":28},{"ruleId":"262","severity":1,"message":"281","line":2,"column":10,"nodeType":"264","messageId":"265","endLine":2,"endColumn":13},{"ruleId":"262","severity":1,"message":"282","line":3,"column":10,"nodeType":"264","messageId":"265","endLine":3,"endColumn":18},{"ruleId":"262","severity":1,"message":"283","line":37,"column":19,"nodeType":"264","messageId":"265","endLine":37,"endColumn":23},{"ruleId":"262","severity":1,"message":"284","line":37,"column":24,"nodeType":"264","messageId":"265","endLine":37,"endColumn":30},{"ruleId":"285","severity":1,"message":"286","line":110,"column":1,"nodeType":"287","endLine":114,"endColumn":2},{"ruleId":"262","severity":1,"message":"288","line":1,"column":10,"nodeType":"264","messageId":"265","endLine":1,"endColumn":12},{"ruleId":"262","severity":1,"message":"289","line":1,"column":14,"nodeType":"264","messageId":"265","endLine":1,"endColumn":16},{"ruleId":"262","severity":1,"message":"290","line":2,"column":10,"nodeType":"264","messageId":"265","endLine":2,"endColumn":20},{"ruleId":"262","severity":1,"message":"291","line":2,"column":57,"nodeType":"264","messageId":"265","endLine":2,"endColumn":66},{"ruleId":"262","severity":1,"message":"292","line":3,"column":10,"nodeType":"264","messageId":"265","endLine":3,"endColumn":23},{"ruleId":"293","severity":1,"message":"294","line":238,"column":111,"nodeType":"295","messageId":"296","endLine":238,"endColumn":113},{"ruleId":"262","severity":1,"message":"297","line":3,"column":8,"nodeType":"264","messageId":"265","endLine":3,"endColumn":13},{"ruleId":"262","severity":1,"message":"271","line":4,"column":8,"nodeType":"264","messageId":"265","endLine":4,"endColumn":21},{"ruleId":"262","severity":1,"message":"298","line":15,"column":12,"nodeType":"264","messageId":"265","endLine":15,"endColumn":26},{"ruleId":"262","severity":1,"message":"299","line":15,"column":27,"nodeType":"264","messageId":"265","endLine":15,"endColumn":37},{"ruleId":"262","severity":1,"message":"300","line":15,"column":38,"nodeType":"264","messageId":"265","endLine":15,"endColumn":44},{"ruleId":"262","severity":1,"message":"301","line":1,"column":10,"nodeType":"264","messageId":"265","endLine":1,"endColumn":17},{"ruleId":"262","severity":1,"message":"301","line":1,"column":10,"nodeType":"264","messageId":"265","endLine":1,"endColumn":17},{"ruleId":"262","severity":1,"message":"302","line":2,"column":20,"nodeType":"264","messageId":"265","endLine":2,"endColumn":28},{"ruleId":"262","severity":1,"message":"303","line":2,"column":36,"nodeType":"264","messageId":"265","endLine":2,"endColumn":45},{"ruleId":"262","severity":1,"message":"304","line":3,"column":10,"nodeType":"264","messageId":"265","endLine":3,"endColumn":19},{"ruleId":"262","severity":1,"message":"303","line":2,"column":36,"nodeType":"264","messageId":"265","endLine":2,"endColumn":45},{"ruleId":"262","severity":1,"message":"304","line":3,"column":10,"nodeType":"264","messageId":"265","endLine":3,"endColumn":19},{"ruleId":"262","severity":1,"message":"303","line":2,"column":36,"nodeType":"264","messageId":"265","endLine":2,"endColumn":45},{"ruleId":"262","severity":1,"message":"304","line":3,"column":10,"nodeType":"264","messageId":"265","endLine":3,"endColumn":19},{"ruleId":"262","severity":1,"message":"305","line":5,"column":32,"nodeType":"264","messageId":"265","endLine":5,"endColumn":37},{"ruleId":"262","severity":1,"message":"306","line":6,"column":10,"nodeType":"264","messageId":"265","endLine":6,"endColumn":22},{"ruleId":"307","severity":1,"message":"308","line":36,"column":43,"nodeType":"309","messageId":"310","endLine":36,"endColumn":45},{"ruleId":"307","severity":1,"message":"308","line":36,"column":67,"nodeType":"309","messageId":"310","endLine":36,"endColumn":69},{"ruleId":"262","severity":1,"message":"289","line":1,"column":10,"nodeType":"264","messageId":"265","endLine":1,"endColumn":12},{"ruleId":"262","severity":1,"message":"311","line":3,"column":10,"nodeType":"264","messageId":"265","endLine":3,"endColumn":16},{"ruleId":"262","severity":1,"message":"312","line":3,"column":18,"nodeType":"264","messageId":"265","endLine":3,"endColumn":24},{"ruleId":"262","severity":1,"message":"313","line":3,"column":19,"nodeType":"264","messageId":"265","endLine":3,"endColumn":32},{"ruleId":"258","replacedBy":"314"},{"ruleId":"260","replacedBy":"315"},{"ruleId":"262","severity":1,"message":"305","line":5,"column":32,"nodeType":"264","messageId":"265","endLine":5,"endColumn":37},{"ruleId":"262","severity":1,"message":"306","line":6,"column":10,"nodeType":"264","messageId":"265","endLine":6,"endColumn":22},{"ruleId":"307","severity":1,"message":"308","line":39,"column":43,"nodeType":"309","messageId":"310","endLine":39,"endColumn":45},{"ruleId":"307","severity":1,"message":"308","line":39,"column":67,"nodeType":"309","messageId":"310","endLine":39,"endColumn":69},{"ruleId":"262","severity":1,"message":"316","line":17,"column":47,"nodeType":"264","messageId":"265","endLine":17,"endColumn":58},{"ruleId":"262","severity":1,"message":"317","line":17,"column":59,"nodeType":"264","messageId":"265","endLine":17,"endColumn":73},{"ruleId":"262","severity":1,"message":"318","line":1,"column":48,"nodeType":"264","messageId":"265","endLine":1,"endColumn":62},{"ruleId":"262","severity":1,"message":"319","line":9,"column":20,"nodeType":"264","messageId":"265","endLine":9,"endColumn":33},{"ruleId":"320","severity":1,"message":"321","line":29,"column":63,"nodeType":"322","messageId":"323","endLine":29,"endColumn":65},{"ruleId":"262","severity":1,"message":"324","line":2,"column":24,"nodeType":"264","messageId":"265","endLine":2,"endColumn":29},{"ruleId":"276","severity":1,"message":"325","line":27,"column":6,"nodeType":"278","endLine":27,"endColumn":8,"suggestions":"326"},{"ruleId":"262","severity":1,"message":"327","line":2,"column":16,"nodeType":"264","messageId":"265","endLine":2,"endColumn":25},"no-native-reassign",["328"],"no-negated-in-lhs",["329"],"@typescript-eslint/no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'getuid' is defined but never used.","'LoadingCompnent' is defined but never used.","'appLoaded' is assigned a value but never used.","'DropdownMenu' is defined but never used.","'isLoggedIn' is assigned a value but never used.","'ActivityStore' is defined but never used.","'RootStore' is defined but never used.","'group' is defined but never used.","'Segment' is defined but never used.","'hasLengthBetween' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'activity.id.length'. Either include it or remove the dependency array.","ArrayExpression",["330"],"'handleInputChange' is assigned a value but never used.","'fil' is defined but never used.","'promises' is defined but never used.","'data' is assigned a value but never used.","'config' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'ca' is defined but never used.","'tr' is defined but never used.","'observable' is defined but never used.","'configure' is defined but never used.","'createContext' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'React' is defined but never used.","'deleteActivity' is assigned a value but never used.","'submitting' is assigned a value but never used.","'target' is assigned a value but never used.","'observe' is defined but never used.","'Observer' is defined but never used.","'FinalForm' is defined but never used.","'FormField' is defined but never used.","'Label' is defined but never used.","'ErrorMessage' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'Button' is defined but never used.","'Header' is defined but never used.","'MessageHeader' is defined but never used.",["328"],["329"],"'uploadPhoto' is assigned a value but never used.","'uploadingPhoto' is assigned a value but never used.","'makeObservable' is defined but never used.","'isCurrentUser' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Image' is defined but never used.","React Hook useCallback has a missing dependency: 'setFiles'. Either include it or remove the dependency array. If 'setFiles' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["331"],"'Component' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},"Update the dependencies array to be: [LoadActivity, clearActivity, match.params.id, initialFormState, activity.id.length]",{"range":"336","text":"337"},"Update the dependencies array to be: [setFiles]",{"range":"338","text":"339"},[2054,2115],"[LoadActivity, clearActivity, match.params.id, initialFormState, activity.id.length]",[816,818],"[setFiles]"]