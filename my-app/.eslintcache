[{"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\index.tsx":"1","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\reportWebVitals.ts":"2","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\nav\\NavBar.tsx":"4","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityDashboard.tsx":"5","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityList.tsx":"6","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetails.tsx":"7","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\form\\ActivityForm.tsx":"8","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\api\\agent.ts":"9","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\LoadingCompnent.tsx":"10","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\activityStore.ts":"11","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\models\\activity.ts":"12","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\home\\HomePage.tsx":"13","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\ScrollToTop.tsx":"14","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityListItem.tsx":"15","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedHeader.tsx":"16","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedInfo.tsx":"17","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedChat.tsx":"18","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedSideBar.tsx":"19","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\NotFound.tsx":"20","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\TextInput.tsx":"21","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\TextAreaInput.tsx":"22","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\SelectInput.tsx":"23","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\categoryOptionsts.ts":"24","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\rootStore.ts":"25","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\userStore.ts":"26","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\user\\LoginForm.tsx":"27","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\commonStore.ts":"28","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\modalStore.ts":"29","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\modals\\ModalContainer.tsx":"30","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\ErrorMessage.tsx":"31","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\ErrorMessageViewer.tsx":"32","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\user\\RegisterForm.tsx":"33","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityListItemAttendees.tsx":"34","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfilePage.tsx":"35","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfileHeader.tsx":"36","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfileContent.tsx":"37","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\profileStore.ts":"38","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfilePhotos.tsx":"39","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\photoUpload\\PhotoUploadWidget.tsx":"40","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\photoUpload\\PhotoWidgetDropZone.tsx":"41","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\photoUpload\\PhotoWidgetCropper.tsx":"42","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfileFollowings.tsx":"43","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfileCard.tsx":"44"},{"size":1017,"mtime":1612528031235,"results":"45","hashOfConfig":"46"},{"size":425,"mtime":499162500000,"results":"47","hashOfConfig":"46"},{"size":2403,"mtime":1615566128141,"results":"48","hashOfConfig":"46"},{"size":1664,"mtime":1615565362191,"results":"49","hashOfConfig":"46"},{"size":1151,"mtime":1614346984706,"results":"50","hashOfConfig":"46"},{"size":1150,"mtime":1614346809910,"results":"51","hashOfConfig":"46"},{"size":1754,"mtime":1615751055966,"results":"52","hashOfConfig":"46"},{"size":4578,"mtime":1615921571456,"results":"53","hashOfConfig":"46"},{"size":4060,"mtime":1616444579914,"results":"54","hashOfConfig":"46"},{"size":334,"mtime":1610100944050,"results":"55","hashOfConfig":"46"},{"size":9830,"mtime":1615923872318,"results":"56","hashOfConfig":"46"},{"size":523,"mtime":1613216374050,"results":"57","hashOfConfig":"46"},{"size":1759,"mtime":1614404470994,"results":"58","hashOfConfig":"46"},{"size":313,"mtime":1610716654069,"results":"59","hashOfConfig":"46"},{"size":2637,"mtime":1615565315236,"results":"60","hashOfConfig":"46"},{"size":2607,"mtime":1615565519281,"results":"61","hashOfConfig":"46"},{"size":1745,"mtime":1610813377424,"results":"62","hashOfConfig":"46"},{"size":3029,"mtime":1615923988435,"results":"63","hashOfConfig":"46"},{"size":2012,"mtime":1616433975200,"results":"64","hashOfConfig":"46"},{"size":629,"mtime":1611308813871,"results":"65","hashOfConfig":"46"},{"size":666,"mtime":1612523374988,"results":"66","hashOfConfig":"46"},{"size":687,"mtime":1612524062855,"results":"67","hashOfConfig":"46"},{"size":777,"mtime":1612526412650,"results":"68","hashOfConfig":"46"},{"size":346,"mtime":1612526054038,"results":"69","hashOfConfig":"46"},{"size":851,"mtime":1615568342698,"results":"70","hashOfConfig":"46"},{"size":1872,"mtime":1614958715100,"results":"71","hashOfConfig":"46"},{"size":1886,"mtime":1614403959428,"results":"72","hashOfConfig":"46"},{"size":832,"mtime":1614958221173,"results":"73","hashOfConfig":"46"},{"size":591,"mtime":1614403420256,"results":"74","hashOfConfig":"46"},{"size":565,"mtime":1614403341623,"results":"75","hashOfConfig":"46"},{"size":454,"mtime":1614363542997,"results":"76","hashOfConfig":"46"},{"size":777,"mtime":1614405445809,"results":"77","hashOfConfig":"46"},{"size":2125,"mtime":1614405074789,"results":"78","hashOfConfig":"46"},{"size":978,"mtime":1616434237867,"results":"79","hashOfConfig":"46"},{"size":1562,"mtime":1616445390510,"results":"80","hashOfConfig":"46"},{"size":2201,"mtime":1616444326210,"results":"81","hashOfConfig":"46"},{"size":1048,"mtime":1616445551966,"results":"82","hashOfConfig":"46"},{"size":6077,"mtime":1616445785473,"results":"83","hashOfConfig":"46"},{"size":3120,"mtime":1615751527470,"results":"84","hashOfConfig":"46"},{"size":2048,"mtime":1615749730541,"results":"85","hashOfConfig":"46"},{"size":1197,"mtime":1615575296169,"results":"86","hashOfConfig":"46"},{"size":1271,"mtime":1615747740466,"results":"87","hashOfConfig":"46"},{"size":1138,"mtime":1616445801076,"results":"88","hashOfConfig":"46"},{"size":721,"mtime":1616445111353,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"q2xiso",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"92"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"92"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"92"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"92"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"92"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"92"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"92"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"92"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"92"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"92"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"92"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"92"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"92"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"92"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"92"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"92"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"92"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"92"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"92"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"92"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\index.tsx",[],["201","202"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\reportWebVitals.ts",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\App.tsx",["203","204","205","206"],"import React ,{Fragment, useContext, useEffect} from  'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from '../../feature/nav/NavBar';\nimport ActivityDashboard from '../../feature/activities/dashboard/ActivityDashboard';\nimport {observer} from 'mobx-react-lite';\nimport { Route,RouteComponentProps,Router,Switch,withRouter } from 'react-router-dom';\nimport { HomePage } from '../../feature/home/HomePage';\nimport { ActivityForm } from '../../feature/activities/form/ActivityForm';\nimport { ActivityDetails } from '../../feature/activities/details/ActivityDetails';\nimport NotFound from './NotFound';\nimport { ToastContainer } from 'react-toastify';\nimport LoginForm from '../../feature/user/LoginForm';\nimport { RootStoreContext } from '../stores/rootStore';\nimport { getuid } from 'process';\nimport { LoadingCompnent } from './LoadingCompnent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport {ProfilePage} from '../../feature/profiles/ProfilePage'\n\nconst App:React.FC<RouteComponentProps> = ({location}) => {\n\n  const rootStore=useContext(RootStoreContext);\n  const {setAppLoaded,token,appLoaded} =rootStore.commonStore;\n  const {getUser} = rootStore.userStore;\n\n  useEffect(()=>{\n    if(token)\n    {\n      getUser().finally(()=>setAppLoaded())\n    }\n    else\n    {\n      setAppLoaded()\n    }\n  },[getUser,setAppLoaded,token])\n\n \n\n    return (\n      <Fragment>\n        <ModalContainer></ModalContainer>\n        <ToastContainer position='top-right'/> \n        <Route exact path='/' component={HomePage} />\n        <Route path={'/(.+)'} render={() => (\n                <Fragment>\n                 <NavBar />\n                 <Container style={{marginTop:'7em'}}>\n                   <Switch>\n                    <Route exact path='/activities' component={ActivityDashboard}/>\n                    <Route  path='/activities/:id' component={ActivityDetails}/>\n                    <Route key={location.key} path= {['/createActivity','/manage/:id']} component={ActivityForm}/>\n                    <Route path='/profile/:username' component={ProfilePage}/>\n                    <Route path='/login' component={LoginForm}/>\n                    <Route component={NotFound}/>\n                   </Switch>\n                 </Container>\n                 \n                 </Fragment>\n        )}></Route>\n      </Fragment>\n    );\n}\nexport default withRouter(observer(App));\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\nav\\NavBar.tsx",["207","208"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport {  Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, DropdownMenu, Image, Menu } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\n\r\n\r\nexport const NavBar:React.FC = () => {\r\n    const rootStore= useContext(RootStoreContext);\r\n    const {isLoggedIn,user,logout} = rootStore.userStore;\r\n    return (\r\n        <Menu fixed='top' inverted>\r\n            <Container>\r\n            <Menu.Item header as ={NavLink} exact to='/' >\r\n                <img src=\"/assets/logo.png\" alt=\"logo\"style={{marginRight:10}} ></img> Reactivities\r\n            </Menu.Item>\r\n            <Menu.Item  name='Activities' as={NavLink} to ='/activities'/>\r\n            <Menu.Item >\r\n                <Button as={NavLink} to='/createActivity' positive content='Create Activity'></Button>\r\n            </Menu.Item>\r\n            {user && (\r\n                    <Menu.Item position='right'>\r\n                      <Image avatar spaced='right' src={user.imgae ||'/assets/user.png'} />\r\n                      <Dropdown pointing='top left' text={user.displayName}>\r\n                        <Dropdown.Menu>\r\n                          <Dropdown.Item as={Link} to={`/profile/${user.username}`} text='My profile' icon='user'/>\r\n                           <Dropdown.Item  onClick={logout} text='Logout' icon='power' /> \r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </Menu.Item>)}\r\n                    </Container>\r\n                    </Menu>\r\n\r\n    )\r\n};\r\nexport default observer( NavBar);","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityDashboard.tsx",["209","210"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect } from 'react'\r\nimport { Grid, GridColumn } from 'semantic-ui-react';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport { LoadingCompnent } from '../../../app/layout/LoadingCompnent';\r\nimport { RootStore, RootStoreContext } from '../../../app/stores/rootStore';\r\n\r\nexport const ActivityDashboard :React.FC = () => {\r\n    // const activityStore = useContext(ActivityStore);\r\n    const rootStore= useContext(RootStoreContext);\r\n    const activityStore = rootStore.activityStore;\r\n\r\n \r\n    useEffect(() => {\r\n       activityStore.loadActivities();\r\n       },[activityStore]);\r\n     \r\n     if(activityStore.loadingInitial) return <LoadingCompnent content='Loading activites...'></LoadingCompnent>;\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10} >\r\n                <ActivityList />\r\n            </Grid.Column>\r\n            <GridColumn width={6}>\r\n               <h2>Activity filters</h2>\r\n            </GridColumn>\r\n        </Grid>\r\n    )\r\n}\r\nexport default observer(ActivityDashboard) ;","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityList.tsx",["211","212","213"],"import { group } from 'console';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { Fragment, useContext } from 'react'\r\nimport { Item , Label, Segment} from 'semantic-ui-react';\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport { ActivityListItem } from './ActivityListItem';\r\n\r\nexport const ActivityList:React.FC = () => {\r\n    const rootStore= useContext(RootStoreContext);\r\n    const activityStore = rootStore.activityStore;\r\n    // const activityStore= useContext(ActivityStore);\r\n    const {activitiesByDate} =activityStore;\r\n    return (\r\n        <Fragment>\r\n          {activitiesByDate.map(([group,activities])=>(\r\n            <Fragment key={group}>\r\n              <Label size='large' color='blue'>{group}</Label>\r\n                <Item.Group divided>\r\n                  {activities.map(activity =>(\r\n                <ActivityListItem activity={activity} ></ActivityListItem>\r\n                ))}\r\n                </Item.Group>\r\n            </Fragment>\r\n          ))}\r\n\r\n      </Fragment>\r\n\r\n\r\n    )\r\n}\r\nexport default observer(ActivityList);","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetails.tsx",["214"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext,useEffect } from 'react'\r\nimport {  RouteComponentProps } from 'react-router-dom';\r\nimport {  Grid } from 'semantic-ui-react';\r\nimport { LoadingCompnent } from '../../../app/layout/LoadingCompnent';\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport { ActivityDetailedChat } from './ActivityDetailedChat';\r\nimport { ActivityDetailedHeader } from './ActivityDetailedHeader';\r\nimport { ActivityDetailedInfo } from './ActivityDetailedInfo';\r\nimport { ActivityDetailedSideBar } from './ActivityDetailedSideBar';\r\n\r\ninterface DetailsParams\r\n{\r\n  id:string\r\n}\r\nexport const ActivityDetails:React.FC<RouteComponentProps<DetailsParams>> = ({match,history}) => {\r\n\r\n    const rootStore= useContext(RootStoreContext);\r\n    const activityStore = rootStore.activityStore;\r\n    // const activityStore= useContext(ActivityStore);\r\n    const {selectedActivity:activity,LoadActivity,loadingInitial} = activityStore;\r\n\r\n    useEffect(() => {\r\n    LoadActivity(match.params.id)\r\n    },[LoadActivity,match.params.id]);\r\n\r\n    if(loadingInitial || !activity) return (<LoadingCompnent content='Loading activity...'></LoadingCompnent>)\r\n    if(!activity) return <h2>activity not found</h2>\r\n    return (\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          <ActivityDetailedHeader activity={activity}/>\r\n          <ActivityDetailedInfo activity={activity}/>\r\n          <ActivityDetailedChat/>\r\n        </Grid.Column>\r\n        <Grid.Column width={6}>\r\n        <ActivityDetailedSideBar attendees ={activity.attendees}/>\r\n        </Grid.Column>\r\n      </Grid>\r\n    )\r\n}\r\nexport default observer(ActivityDetails) ;","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\form\\ActivityForm.tsx",["215","216","217","218"],"import React,{FormEvent, useContext, useEffect, useState} from 'react'\r\nimport { Button, Form, Grid, GridColumn, Segment } from 'semantic-ui-react'\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport {v4 as uuid} from 'uuid';\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Form as FinalForm, Field} from 'react-final-form';\r\nimport TextInput from '../../../app/common/form/TextInput';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\nimport { SelectInput } from '../../../app/common/form/SelectInput';\r\nimport { category } from '../../../app/common/form/categoryOptionsts';\r\nimport {combineValidators, composeValidators, hasLengthBetween, hasLengthGreaterThan, isRequired} from 'revalidate';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\n\r\n\r\nconst validate=combineValidators({\r\n\r\n    title:isRequired({message:'Event title is requied'}),\r\n    category: isRequired('Category'),\r\n    description: composeValidators(isRequired('description'),\r\n    hasLengthGreaterThan(4)({message:'Description needs to be at least 5 charachters'}))(),\r\n    city:isRequired('City'),\r\n    date:isRequired('Date'),\r\n    venue:isRequired('Venue')\r\n\r\n\r\n})\r\n\r\n\r\ninterface DetailsParams\r\n{\r\n    id:string\r\n}\r\n\r\nexport const ActivityForm:React.FC<RouteComponentProps<DetailsParams>> = ({history,match}) => {\r\n\r\n    const rootStore= useContext(RootStoreContext);\r\n    const activityStore = rootStore.activityStore;\r\n    // const activityStore= useContext(ActivityStore);\r\n    const {createActivity,editActivity,submitting,selectedActivity:initialFormState,LoadActivity,clearActivity}= activityStore;\r\n\r\n    useEffect(()=>{\r\n        if(match.params.id && activity.id.length ===0)\r\n        {\r\n            LoadActivity(match.params.id).then(\r\n                ()=> initialFormState && setActivity(initialFormState));\r\n        }\r\n        return () =>{\r\n            clearActivity();\r\n        }\r\n    },[LoadActivity,clearActivity,match.params.id,initialFormState]);\r\n    // OLD code \r\n    const [activity,setActivity]=useState<IActivity>({\r\n        id:'',\r\n        title:'',\r\n        category:'',\r\n        date:'',\r\n        city:'',\r\n        venue:'',\r\n        description:'' ,\r\n        attendees:[],\r\n        isGoing:false,\r\n        isHost:false,\r\n        comments:[]\r\n    });\r\n\r\n    const handleInputChange=(event:FormEvent<HTMLInputElement|HTMLTextAreaElement>)=>{\r\n        const{name,value} =event.currentTarget;\r\n        setActivity({...activity,[name]:value});\r\n    };\r\n\r\n\r\n    const handleFinalFormSubmit = (values:any)=>{\r\n        if(activity.id.length ===0)\r\n        {\r\n            let newActivity={\r\n                ...activity,\r\n                id:uuid()\r\n            }\r\n            createActivity(newActivity).then(()=>history.push(`/activities/${newActivity.id}`));\r\n        }\r\n        else{\r\n            editActivity(activity).then(()=>history.push(`/activities/${activity.id}`));\r\n        }\r\n        console.log(values);\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <GridColumn width={10}>\r\n            <Segment clearing>\r\n                <FinalForm\r\n                validate={validate}\r\n                onSubmit={handleFinalFormSubmit}\r\n                initialValues={activity}\r\n                render={({handleSubmit, invalid,pristine})=> (\r\n                <Form onSubmit={handleSubmit}>\r\n                <Field component={TextInput}  name='title' placeholder='Title' value={activity.title} />\r\n                <Field component={TextAreaInput} rows={3} name='description' placeholder='Description' value={activity.description} />\r\n                <Field component={SelectInput} options={category} name='category' placeholder='Catgeory' value={activity.category}/>\r\n                <Field component={TextInput} type='Date' name='date'  placeholder='Date' value={activity.date} />\r\n                <Field component={TextInput} name='city' placeholder='City' value={activity.city}/>\r\n                <Field component={TextInput} name='venue' placeholder='Venue' value={activity.venue}/>\r\n                <Button loading={submitting} floated='right' positive type='submit' content='Submit' disabled={invalid || pristine}/>\r\n                <Button floated='right' type='button' content='Cancel' onClick={()=> history.push('/activities')}/>\r\n            </Form>\r\n                )}/>\r\n        </Segment>\r\n            </GridColumn>\r\n        </Grid>\r\n      \r\n    );\r\n}\r\nexport default observer(ActivityForm);","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\api\\agent.ts",["219","220","221","222","223"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\LoadingCompnent.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\activityStore.ts",["224","225","226","227","228"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\models\\activity.ts",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\home\\HomePage.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\ScrollToTop.tsx",["229"],"import {useEffect} from 'react';\r\nimport {withRouter} from 'react-router-dom'\r\nimport React from 'react'\r\n\r\n const ScrollToTop = ({children, location:{pathname}}:any) => {\r\n    useEffect(()=>{\r\n        window.scrollTo(0,0);\r\n    },[pathname]);\r\n\r\n    return children;\r\n}\r\nexport default withRouter(ScrollToTop);\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityListItem.tsx",["230","231","232","233"],"import React, { useContext } from 'react';\r\nimport { Item , Button, Label, Segment, Icon} from 'semantic-ui-react';\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport { Link } from 'react-router-dom';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport { ActivityListItemAttendees } from './ActivityListItemAttendees';\r\n\r\nexport const ActivityListItem:React.FC<{activity:IActivity}> = ({activity}) => {\r\n    const host = activity.attendees.filter( x=> x.isHost)[0];\r\n\r\n    const rootStore= useContext(RootStoreContext);\r\n    const activityStore = rootStore.activityStore;\r\n    // const activityStore= useContext(ActivityStore);\r\n    const {deleteActivity,submitting,target} =activityStore;\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group>\r\n                        <Item>\r\n                        <Item.Image size='tiny' circular src={'/assets/user.png' || host.image} style={{marginBottom:3}}/>\r\n                        <Item.Content>\r\n                        <Item.Header as={Link} to={`/activities/${activity.id}`}>{activity.title}</Item.Header>\r\n                        <Item.Description> Hosted by <Link to={`/profile/${host.username}`}>{host.displayName}</Link> </Item.Description>\r\n                        {activity.isHost &&\r\n                        <Item.Description>\r\n                        <Label basic color='orange'\r\n                        content='You are hosting this activity' />\r\n                         </Item.Description>\r\n                        }\r\n\r\n                        {activity.isGoing && !activity.isHost &&\r\n                        <Item.Description>\r\n                        <Label basic color='green'\r\n                        content='You are going to this activity' />\r\n                         </Item.Description>\r\n                        }\r\n                        </Item.Content>\r\n                        </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <Icon name='clock'/>{activity.date}\r\n                <Icon name='marker'/>{activity.venue}, {activity.city}\r\n            </Segment>\r\n            <Segment secondary>\r\n               <ActivityListItemAttendees attendees ={activity.attendees}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button as={Link} to ={`/activities/${activity.id}`} floated='right' content='View' color='blue'></Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n        \r\n    )\r\n}\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedHeader.tsx",["234"],"import { observe } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Item, Header, Button,Image } from 'semantic-ui-react'\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\n\r\nconst activityImageStyle = {\r\n  filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n  position: 'absolute',\r\n  bottom: '5%',\r\n  left: '5%',\r\n  width: '100%',\r\n  height: 'auto',\r\n  color: 'white'\r\n};\r\nexport const ActivityDetailedHeader :React.FC<{activity:IActivity}> = ({activity}) => {\r\n\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {cancelAttendance,attendActivity,loading}= rootStore.activityStore;\r\n    const host = activity.attendees.filter( x=> x.isHost)[0];\r\n    return (\r\n            <Segment.Group>\r\n              <Segment basic attached='top' style={{ padding: '0' }}>\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment basic style={activityImageTextStyle}>\r\n                  <Item.Group>\r\n                    <Item>\r\n                      <Item.Content>\r\n                        <Header\r\n                          size='huge'\r\n                          content={activity.title}\r\n                          style={{ color: 'white' }}\r\n                        />\r\n                        <p>{activity.date}</p>\r\n                        <p>\r\n                          Hosted by <Link to={`/profile/${host.username}`}>\r\n                          <strong>{host.displayName}</strong>\r\n                          </Link> \r\n                        </p>\r\n                      </Item.Content>\r\n                    </Item>\r\n                  </Item.Group>\r\n                </Segment>\r\n              </Segment>\r\n              <Segment clearing attached='bottom'> \r\n              {activity.isHost ? \r\n                (\r\n\r\n                  <Button as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'>\r\n                  Manage Event\r\n                  </Button>\r\n                ):activity.isGoing ? (\r\n                  <Button loading={loading} onClick={cancelAttendance}>Cancel attendance</Button>\r\n                ):\r\n                (\r\n                  <Button loading={loading} onClick={attendActivity} color='teal'>Join Activity</Button>\r\n                )\r\n              }\r\n              </Segment>\r\n            </Segment.Group>\r\n    )\r\n}\r\nexport default observer (ActivityDetailedHeader);\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedInfo.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedChat.tsx",["235"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\details\\ActivityDetailedSideBar.tsx",["236","237"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\layout\\NotFound.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\TextInput.tsx",["238","239"],"import React from 'react'\r\nimport { FieldRenderProps, Form as FinalForm } from 'react-final-form'\r\nimport { FormField, FormFieldProps, Label , Form} from 'semantic-ui-react'\r\n\r\n\r\ninterface IProps extends FieldRenderProps<string,HTMLElement>,FormFieldProps\r\n{\r\n\r\n}\r\n\r\nexport const TextInput:React.FC<IProps> = ({input,width,type, placeholder, meta:{touched,error} }) => {\r\n\r\n return( \r\n    <Form.Field error={touched && !!error} type={type} width={width}>\r\n     <input {...input} placeholder={placeholder}>\r\n     </input>\r\n     {touched && error && (\r\n        <Label basic color='red'>{error}</Label>\r\n     )}\r\n    </Form.Field>\r\n )\r\n};\r\n\r\nexport default TextInput;\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\TextAreaInput.tsx",["240","241"],"import React from 'react'\r\nimport { FieldRenderProps, Form as FinalForm } from 'react-final-form'\r\nimport { FormField, FormFieldProps, Label , Form} from 'semantic-ui-react'\r\n\r\ninterface IProps extends FieldRenderProps<string,HTMLElement>,FormFieldProps\r\n{\r\n\r\n}\r\n\r\nexport const TextAreaInput: React.FC<IProps> = ({input, type, width, placeholder,rows , meta:{touched,error}}) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n        <textarea rows={rows} {...input} placeholder={placeholder}/>\r\n        {touched && error && (\r\n           <Label basic color='red'>{error}</Label>\r\n        )}\r\n       </Form.Field>\r\n    )\r\n}\r\nexport default TextAreaInput;","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\SelectInput.tsx",["242","243"],"import React from 'react'\r\nimport { FieldRenderProps, Form as FinalForm } from 'react-final-form'\r\nimport { FormField, FormFieldProps, Label , Form, Select} from 'semantic-ui-react'\r\n\r\ninterface IProps extends FieldRenderProps<string,HTMLElement>,FormFieldProps\r\n{\r\n\r\n}\r\nexport const SelectInput:React.FC<IProps> = ({\r\n    input,\r\n    width,\r\n    options,\r\n    placeholder,\r\n    meta:{touched,error}\r\n\r\n}) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n        <Select value={input.value}\r\n        onChange={(e,data)=> input.onChange(data.value)}\r\n        placeholder={placeholder}\r\n        options={options}/>\r\n        {touched && error && (\r\n           <Label basic color='red'>{error}</Label>\r\n        )}\r\n       </Form.Field>\r\n    )\r\n}\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\categoryOptionsts.ts",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\rootStore.ts",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\userStore.ts",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\user\\LoginForm.tsx",["244","245","246","247"],"import { FORM_ERROR } from 'final-form';\r\nimport React, { useContext } from 'react'\r\nimport {Form as FinalForm,Field} from 'react-final-form'\r\nimport { combineValidators, isRequired } from 'revalidate';\r\nimport { Button, Form, Header, Label } from 'semantic-ui-react'\r\nimport { ErrorMessage } from '../../app/common/form/ErrorMessage';\r\nimport ErrorMessageViewer from '../../app/common/form/ErrorMessageViewer';\r\nimport TextInput from '../../app/common/form/TextInput'\r\nimport { IUserFormValues } from '../../app/models/user';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\n\r\n\r\nconst validate =combineValidators({\r\n    email:isRequired('email'),\r\n    password:isRequired('password')\r\n})\r\n\r\nexport const LoginForm = () => {\r\n    const rootStore= useContext(RootStoreContext);\r\n    const {login} = rootStore.userStore;\r\n    \r\n\r\n    return (\r\n        <FinalForm onSubmit={(values:IUserFormValues)=>login(values).catch(error=>({\r\n            [FORM_ERROR]:error\r\n        }))}\r\n        validate={validate}\r\n        \r\n        render ={({handleSubmit,submitting,form,submitError,invalid,pristine,dirtySinceLastSubmit})=>(\r\n            <Form onSubmit={handleSubmit} error >\r\n                <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'></Header>\r\n                <Field name='email' component={TextInput} placeholder=\"Email\" />\r\n                <Field name=\"password\" component={TextInput} type=\"password\" placeholder=\"Password\"/>\r\n                {submitError && !dirtySinceLastSubmit && (<ErrorMessageViewer text='Invalid email or password' error={submitError}/>)}\r\n                <br/>\r\n                <Button disabled={invalid && !dirtySinceLastSubmit||pristine} loading={submitting} positive content=\"Login\" color='teal' fluid/>\r\n                \r\n            </Form>\r\n\r\n        )}\r\n        />\r\n\r\n    );\r\n};\r\nexport default LoginForm\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\commonStore.ts",["248"],"import { tr } from \"date-fns/locale\";\r\nimport { action, observable, reaction } from \"mobx\";\r\nimport { RootStore } from \"./rootStore\";\r\n\r\nexport default class CommonStore {\r\n    rootStore :RootStore;\r\n\r\n    constructor(rootStore:RootStore)\r\n    {\r\n        this.rootStore=rootStore;\r\n        reaction(()=>this.token,\r\n        token=> {\r\n            if(token)\r\n            {\r\n\r\n                window.localStorage.setItem('jwt',token);\r\n            }\r\n            else{\r\n                window.localStorage.removeItem('jwt');\r\n            }\r\n        })\r\n    }\r\n\r\n    @observable token:string |null=window.localStorage.getItem('jwt');\r\n    @observable appLoaded= false;\r\n\r\n    @action setToken=(token:string | null)=>{\r\n        this.token=token;\r\n       \r\n    }\r\n    @action setAppLoaded = ()=> {\r\n        this.appLoaded=true;\r\n    }\r\n}","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\modalStore.ts",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\modals\\ModalContainer.tsx",["249","250"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport { Button, Header, Modal } from 'semantic-ui-react'\r\nimport { RootStoreContext } from '../../stores/rootStore'\r\n\r\nexport const ModalContainer = () => {\r\n\r\n    const rootStore= useContext(RootStoreContext);\r\n    const {modal:{open,body},closeModal}= rootStore.modalStore;\r\n    return (\r\n        <Modal open={open} onClose={closeModal} size='mini'>\r\n      <Modal.Content > {body}\r\n          </Modal.Content>\r\n    </Modal>\r\n    )\r\n}\r\nexport default observer(ModalContainer);","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\ErrorMessage.tsx",["251"],"import { AxiosResponse } from 'axios'\r\nimport React from 'react'\r\nimport { Message } from 'semantic-ui-react'\r\n\r\ninterface IProps {\r\n    error:AxiosResponse,\r\n    text:string\r\n}\r\nexport const ErrorMessage:React.FC<IProps> = ({error,text}) => {\r\n    return (\r\n        <Message error>\r\n            <Message.Header>{error.statusText}</Message.Header>\r\n\r\n            {text &&<Message.Content content={text}></Message.Content>}\r\n        </Message>\r\n    )\r\n}\r\n",["252","253"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\form\\ErrorMessageViewer.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\user\\RegisterForm.tsx",["254","255","256","257"],"import { FORM_ERROR } from 'final-form';\r\nimport React, { useContext } from 'react'\r\nimport {Form as FinalForm,Field} from 'react-final-form'\r\nimport { combineValidators, isRequired } from 'revalidate';\r\nimport { Button, Form, Header, Label } from 'semantic-ui-react'\r\nimport { ErrorMessage } from '../../app/common/form/ErrorMessage';\r\nimport ErrorMessageViewer from '../../app/common/form/ErrorMessageViewer';\r\nimport TextInput from '../../app/common/form/TextInput'\r\nimport { IUserFormValues } from '../../app/models/user';\r\nimport { RootStoreContext } from '../../app/stores/rootStore';\r\n\r\n\r\nconst validate =combineValidators({\r\n    email:isRequired('email'),\r\n    password:isRequired('password'),\r\n    username:isRequired('username'),\r\n    displayname:isRequired('displayname')\r\n})\r\n\r\nexport const RegisterForm = () => {\r\n    const rootStore= useContext(RootStoreContext);\r\n    const {register} = rootStore.userStore;\r\n    \r\n    return (\r\n        <FinalForm onSubmit={(values:IUserFormValues)=>register(values).catch(error=>({\r\n            [FORM_ERROR]:error\r\n        }))}\r\n\r\n        validate={validate}\r\n        render ={({handleSubmit,submitting,form,submitError,invalid,pristine,dirtySinceLastSubmit})=>(\r\n            <Form onSubmit={handleSubmit} error >\r\n                <Header as='h2' content='Signup to Reactivities' color='teal' textAlign='center'></Header>\r\n                <Field name='username' component={TextInput} placeholder=\"Username\" />\r\n                <Field name='displayname' component={TextInput} placeholder=\"Display Name\" />\r\n                <Field name='email' component={TextInput} placeholder=\"Email\" />\r\n                <Field name=\"password\" component={TextInput} type=\"password\" placeholder=\"Password\"/>\r\n                {submitError && !dirtySinceLastSubmit && (<ErrorMessageViewer  error={submitError}/>)}\r\n                <br/>\r\n                <Button disabled={invalid && !dirtySinceLastSubmit||pristine} loading={submitting} positive content=\"Register\" color='teal' fluid/>\r\n                \r\n            </Form>\r\n\r\n        )}\r\n        />\r\n\r\n    );\r\n};\r\nexport default RegisterForm\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\activities\\dashboard\\ActivityListItemAttendees.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfilePage.tsx",["258","259"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfileHeader.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfileContent.tsx",[],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\stores\\profileStore.ts",["260"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfilePhotos.tsx",["261","262"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useState } from 'react'\r\nimport { Button, ButtonGroup, Card, Grid, GridColumn, Header, Image, Tab } from 'semantic-ui-react'\r\nimport { PhotoUploadWidget } from '../../app/common/photoUpload/PhotoUploadWidget';\r\nimport { RootStoreContext } from '../../app/stores/rootStore'\r\n\r\nexport const ProfilePhotos = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {profile,isCurrentUser,uploadPhoto,uploadingPhoto,setMainPhoto,loading,deletePhoto}= rootStore.profileStore;\r\n    const [addPhotoMode, SetAddPhotoMode] = useState(true);\r\n    const [target, setTarget] = useState<string|undefined>(undefined);\r\n    const [delTarget, setDelTarget] = useState<string|undefined>(undefined);\r\n\r\n    return (\r\n      <Tab.Pane>\r\n          <Grid>\r\n              <GridColumn width={16} style={{paddingBottom:0}}>\r\n              <Header floated='left' icon='image' content='Photos'/>\r\n                    {true && \r\n                        <Button floated='right' basic content={addPhotoMode?'Cancel':'Add Photo'}\r\n                        onClick={() =>SetAddPhotoMode(!addPhotoMode)}/>\r\n                    }\r\n              </GridColumn>\r\n              <GridColumn width={16}>\r\n                  {\r\n                      addPhotoMode ?(<PhotoUploadWidget uploadPhoto={uploadPhoto} loading={uploadingPhoto} />)\r\n                      : (\r\n                        <Card.Group itemPerRow={5}>\r\n                        {profile && profile.photos.map((photo)=>{\r\n                            <Card key ={photo.id}>\r\n                                <Image src={photo.url}/>\r\n                                <ButtonGroup fluid widths={2}>\r\n                                    <Button \r\n                                        name={photo.id}\r\n                                        onClick={(e)=>{\r\n                                        setMainPhoto(photo);\r\n                                        setTarget(e.currentTarget.name)\r\n                                    }}    \r\n                                    disabled={photo.isMain}                      \r\n                                    loading={loading && target=== photo.id} basic positive content='Main'/>\r\n\r\n                                    <Button basic\r\n                                    name={photo.id}\r\n                                    disabled={photo.isMain}\r\n                                    onClick={(e) =>{\r\n                                        deletePhoto(photo);\r\n                                        setDelTarget(e.currentTarget.name)\r\n                                    }}\r\n                                    loading={loading && delTarget === photo.id}\r\n                                    negative icon='trash'/>\r\n                                </ButtonGroup>\r\n                            </Card>\r\n                         })}\r\n                        </Card.Group>\r\n                      )\r\n                  }\r\n\r\n\r\n              </GridColumn>\r\n          </Grid>\r\n          \r\n         \r\n      </Tab.Pane>\r\n    )\r\n}\r\nexport default observer(ProfilePhotos);","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\photoUpload\\PhotoUploadWidget.tsx",["263"],"import React, { Fragment, useEffect, useState } from 'react';\r\nimport { Header, Grid, Image, Button } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport PhotoWidgetDropZone from './PhotoWidgetDropZone';\r\nimport { PhotoWidgetCropper } from './PhotoWidgetCropper';\r\n\r\ninterface IProps {\r\n  loading:boolean;\r\n  uploadPhoto:(file:Blob)=>void;\r\n}\r\n\r\nexport const PhotoUploadWidget:React.FC<IProps> = ({loading,uploadPhoto}) => {\r\n    const [files,setFiles] = useState<any[]>([]);\r\n    const [image, setImage] = useState<Blob|null>(null);\r\n\r\n    useEffect(() => {\r\n        return () =>{\r\n            files.forEach(file=> URL.revokeObjectURL(file.preview))\r\n        }\r\n    })\r\n\r\n    return (\r\n        <Fragment>\r\n        <Grid>\r\n      \r\n          <Grid.Column width={4}>\r\n            <Header color='teal' sub content='Step 1 - Add Photo' />\r\n            <PhotoWidgetDropZone setFiles={setFiles}/>\r\n          </Grid.Column>\r\n          <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n              <Header sub color='teal' content='Step 2 - Resize image' />\r\n              {\r\n              files.length > 0 && (\r\n                <PhotoWidgetCropper setImage={setImage} imagePreview={files[0].preview}/>\r\n              )\r\n              }\r\n          </Grid.Column>\r\n          <Grid.Column width={1} />\r\n          <Grid.Column width={4}>\r\n            <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n            {files.length >0 && \r\n            <Fragment>\r\n               <div className='img-preview' style={{minHeight: '200px', overflow: 'hidden' }} />\r\n               <Button.Group widths={2}>\r\n                 <Button positive icon='check' loading={loading} onClick={()=>uploadPhoto(image!)}/>\r\n                 <Button  icon='close' disabled={loading} onClick={()=>setFiles([])}/>\r\n                 \r\n               </Button.Group>\r\n            </Fragment>\r\n\r\n            }\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(PhotoUploadWidget);\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\photoUpload\\PhotoWidgetDropZone.tsx",["264"],"import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n    setFiles:(files:object[]) =>void\r\n}\r\n\r\nconst dropZoneStyle = {\r\n    border :'dashed 3px #eee',\r\n    borderColor:'#eee',\r\n    borderRadius:'5px',\r\n    paddingTop:'30px',\r\n    textAlign:'center' as 'center',\r\n    height :'200px'\r\n};\r\nconst dropzoneActive={\r\n    borderColor:'green'\r\n}\r\n\r\nconst  PhotoWidgetDropZone: React.FC<IProps> =({setFiles}) => {\r\n  const onDrop = useCallback(acceptedFiles => {\r\n   setFiles(acceptedFiles.map((file:object)=> Object.assign(file,{\r\n    //  this may lead to memory leak problem since we keep store url for image when ever to upload images wihtout cleaning them\r\n       preview:URL.createObjectURL(file)\r\n   })))\r\n  }, [])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ?{...dropZoneStyle,...dropzoneActive}:dropZoneStyle} >\r\n      <input {...getInputProps()} />\r\n        <Icon name='upload' size='huge'/>\r\n        <Header content='Drop image here'/>\r\n    </div>\r\n  )\r\n}\r\nexport default PhotoWidgetDropZone","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\app\\common\\photoUpload\\PhotoWidgetCropper.tsx",["265"],"\r\nimport React, {Component, useRef} from 'react';\r\nimport Cropper from 'react-cropper';\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\ninterface IProps\r\n{\r\n    setImage:(file:Blob) =>void;\r\n    imagePreview:string;\r\n}\r\n\r\nexport const PhotoWidgetCropper:React.FC<IProps> = ({setImage,imagePreview}) => {\r\n    // const cropper =useRef<Cropper>(null);\r\n    const cropper =useRef<Cropper>(null);\r\n    const cropperRef = useRef<HTMLImageElement>(null);\r\n\r\n    const cropImage =()=> {\r\n        if(cropper.current &&\r\n             typeof cropper.current.getCroppedCanvas() ==='undefined')\r\n        {\r\n            return;\r\n        }\r\n        cropper && cropper.current && cropper.current.getCroppedCanvas().toBlob((blob:any)=>\r\n        {\r\n            setImage(blob);\r\n        },'image/jpeg')\r\n    }\r\n    return (\r\n        <Cropper\r\n            ref={cropperRef}\r\n            src={imagePreview}\r\n             style={{height: 200, width: '100%'}}\r\n            // Cropper.js options\r\n            preview='.img-preview'\r\n            aspectRatio={1 / 1}\r\n            guides={false}\r\n            viewMode={1}\r\n            dragMode='move'\r\n            scalable={true}\r\n            cropBoxMovable={true}\r\n            cropBoxResizable={true}\r\n            crop ={cropImage}\r\n       />\r\n    )\r\n}\r\n","C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfileFollowings.tsx",["266","267"],"C:\\Users\\Mohannad-Pc\\source\\repos\\Reactivities\\my-app\\src\\feature\\profiles\\ProfileCard.tsx",[],{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","replacedBy":"271"},{"ruleId":"272","severity":1,"message":"273","line":6,"column":36,"nodeType":"274","messageId":"275","endLine":6,"endColumn":42},{"ruleId":"272","severity":1,"message":"276","line":14,"column":10,"nodeType":"274","messageId":"275","endLine":14,"endColumn":16},{"ruleId":"272","severity":1,"message":"277","line":15,"column":10,"nodeType":"274","messageId":"275","endLine":15,"endColumn":25},{"ruleId":"272","severity":1,"message":"278","line":22,"column":29,"nodeType":"274","messageId":"275","endLine":22,"endColumn":38},{"ruleId":"272","severity":1,"message":"279","line":4,"column":39,"nodeType":"274","messageId":"275","endLine":4,"endColumn":51},{"ruleId":"272","severity":1,"message":"280","line":10,"column":12,"nodeType":"274","messageId":"275","endLine":10,"endColumn":22},{"ruleId":"272","severity":1,"message":"281","line":5,"column":8,"nodeType":"274","messageId":"275","endLine":5,"endColumn":21},{"ruleId":"272","severity":1,"message":"282","line":7,"column":10,"nodeType":"274","messageId":"275","endLine":7,"endColumn":19},{"ruleId":"272","severity":1,"message":"283","line":1,"column":10,"nodeType":"274","messageId":"275","endLine":1,"endColumn":15},{"ruleId":"272","severity":1,"message":"284","line":4,"column":24,"nodeType":"274","messageId":"275","endLine":4,"endColumn":31},{"ruleId":"272","severity":1,"message":"281","line":5,"column":8,"nodeType":"274","messageId":"275","endLine":5,"endColumn":21},{"ruleId":"272","severity":1,"message":"281","line":6,"column":8,"nodeType":"274","messageId":"275","endLine":6,"endColumn":21},{"ruleId":"272","severity":1,"message":"281","line":5,"column":8,"nodeType":"274","messageId":"275","endLine":5,"endColumn":21},{"ruleId":"272","severity":1,"message":"285","line":13,"column":47,"nodeType":"274","messageId":"275","endLine":13,"endColumn":63},{"ruleId":"286","severity":1,"message":"287","line":52,"column":7,"nodeType":"288","endLine":52,"endColumn":68,"suggestions":"289"},{"ruleId":"272","severity":1,"message":"290","line":68,"column":11,"nodeType":"274","messageId":"275","endLine":68,"endColumn":28},{"ruleId":"272","severity":1,"message":"291","line":2,"column":10,"nodeType":"274","messageId":"275","endLine":2,"endColumn":13},{"ruleId":"272","severity":1,"message":"292","line":3,"column":10,"nodeType":"274","messageId":"275","endLine":3,"endColumn":18},{"ruleId":"272","severity":1,"message":"293","line":37,"column":19,"nodeType":"274","messageId":"275","endLine":37,"endColumn":23},{"ruleId":"272","severity":1,"message":"294","line":37,"column":24,"nodeType":"274","messageId":"275","endLine":37,"endColumn":30},{"ruleId":"295","severity":1,"message":"296","line":113,"column":1,"nodeType":"297","endLine":117,"endColumn":2},{"ruleId":"272","severity":1,"message":"298","line":2,"column":10,"nodeType":"274","messageId":"275","endLine":2,"endColumn":12},{"ruleId":"272","severity":1,"message":"299","line":2,"column":14,"nodeType":"274","messageId":"275","endLine":2,"endColumn":16},{"ruleId":"272","severity":1,"message":"300","line":3,"column":57,"nodeType":"274","messageId":"275","endLine":3,"endColumn":66},{"ruleId":"272","severity":1,"message":"301","line":4,"column":10,"nodeType":"274","messageId":"275","endLine":4,"endColumn":23},{"ruleId":"302","severity":1,"message":"303","line":287,"column":111,"nodeType":"304","messageId":"305","endLine":287,"endColumn":113},{"ruleId":"272","severity":1,"message":"306","line":3,"column":8,"nodeType":"274","messageId":"275","endLine":3,"endColumn":13},{"ruleId":"272","severity":1,"message":"281","line":4,"column":8,"nodeType":"274","messageId":"275","endLine":4,"endColumn":21},{"ruleId":"272","severity":1,"message":"307","line":15,"column":12,"nodeType":"274","messageId":"275","endLine":15,"endColumn":26},{"ruleId":"272","severity":1,"message":"308","line":15,"column":27,"nodeType":"274","messageId":"275","endLine":15,"endColumn":37},{"ruleId":"272","severity":1,"message":"309","line":15,"column":38,"nodeType":"274","messageId":"275","endLine":15,"endColumn":44},{"ruleId":"272","severity":1,"message":"310","line":1,"column":10,"nodeType":"274","messageId":"275","endLine":1,"endColumn":17},{"ruleId":"311","severity":1,"message":"312","line":35,"column":112,"nodeType":"313","messageId":"314","endLine":35,"endColumn":114},{"ruleId":"272","severity":1,"message":"310","line":1,"column":10,"nodeType":"274","messageId":"275","endLine":1,"endColumn":17},{"ruleId":"272","severity":1,"message":"315","line":2,"column":20,"nodeType":"274","messageId":"275","endLine":2,"endColumn":28},{"ruleId":"272","severity":1,"message":"316","line":2,"column":36,"nodeType":"274","messageId":"275","endLine":2,"endColumn":45},{"ruleId":"272","severity":1,"message":"317","line":3,"column":10,"nodeType":"274","messageId":"275","endLine":3,"endColumn":19},{"ruleId":"272","severity":1,"message":"316","line":2,"column":36,"nodeType":"274","messageId":"275","endLine":2,"endColumn":45},{"ruleId":"272","severity":1,"message":"317","line":3,"column":10,"nodeType":"274","messageId":"275","endLine":3,"endColumn":19},{"ruleId":"272","severity":1,"message":"316","line":2,"column":36,"nodeType":"274","messageId":"275","endLine":2,"endColumn":45},{"ruleId":"272","severity":1,"message":"317","line":3,"column":10,"nodeType":"274","messageId":"275","endLine":3,"endColumn":19},{"ruleId":"272","severity":1,"message":"318","line":5,"column":32,"nodeType":"274","messageId":"275","endLine":5,"endColumn":37},{"ruleId":"272","severity":1,"message":"319","line":6,"column":10,"nodeType":"274","messageId":"275","endLine":6,"endColumn":22},{"ruleId":"320","severity":1,"message":"321","line":36,"column":43,"nodeType":"322","messageId":"323","endLine":36,"endColumn":45},{"ruleId":"320","severity":1,"message":"321","line":36,"column":67,"nodeType":"322","messageId":"323","endLine":36,"endColumn":69},{"ruleId":"272","severity":1,"message":"299","line":1,"column":10,"nodeType":"274","messageId":"275","endLine":1,"endColumn":12},{"ruleId":"272","severity":1,"message":"324","line":3,"column":10,"nodeType":"274","messageId":"275","endLine":3,"endColumn":16},{"ruleId":"272","severity":1,"message":"325","line":3,"column":18,"nodeType":"274","messageId":"275","endLine":3,"endColumn":24},{"ruleId":"272","severity":1,"message":"326","line":3,"column":19,"nodeType":"274","messageId":"275","endLine":3,"endColumn":32},{"ruleId":"268","replacedBy":"327"},{"ruleId":"270","replacedBy":"328"},{"ruleId":"272","severity":1,"message":"318","line":5,"column":32,"nodeType":"274","messageId":"275","endLine":5,"endColumn":37},{"ruleId":"272","severity":1,"message":"319","line":6,"column":10,"nodeType":"274","messageId":"275","endLine":6,"endColumn":22},{"ruleId":"320","severity":1,"message":"321","line":39,"column":43,"nodeType":"322","messageId":"323","endLine":39,"endColumn":45},{"ruleId":"320","severity":1,"message":"321","line":39,"column":67,"nodeType":"322","messageId":"323","endLine":39,"endColumn":69},{"ruleId":"272","severity":1,"message":"329","line":17,"column":47,"nodeType":"274","messageId":"275","endLine":17,"endColumn":58},{"ruleId":"272","severity":1,"message":"330","line":17,"column":59,"nodeType":"274","messageId":"275","endLine":17,"endColumn":73},{"ruleId":"272","severity":1,"message":"331","line":1,"column":48,"nodeType":"274","messageId":"275","endLine":1,"endColumn":62},{"ruleId":"272","severity":1,"message":"332","line":9,"column":20,"nodeType":"274","messageId":"275","endLine":9,"endColumn":33},{"ruleId":"311","severity":1,"message":"312","line":29,"column":63,"nodeType":"313","messageId":"314","endLine":29,"endColumn":65},{"ruleId":"272","severity":1,"message":"333","line":2,"column":24,"nodeType":"274","messageId":"275","endLine":2,"endColumn":29},{"ruleId":"286","severity":1,"message":"334","line":27,"column":6,"nodeType":"288","endLine":27,"endColumn":8,"suggestions":"335"},{"ruleId":"272","severity":1,"message":"336","line":2,"column":16,"nodeType":"274","messageId":"275","endLine":2,"endColumn":25},{"ruleId":"272","severity":1,"message":"337","line":1,"column":29,"nodeType":"274","messageId":"275","endLine":1,"endColumn":38},{"ruleId":"272","severity":1,"message":"338","line":8,"column":30,"nodeType":"274","messageId":"275","endLine":8,"endColumn":44},"no-native-reassign",["339"],"no-negated-in-lhs",["340"],"@typescript-eslint/no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'getuid' is defined but never used.","'LoadingCompnent' is defined but never used.","'appLoaded' is assigned a value but never used.","'DropdownMenu' is defined but never used.","'isLoggedIn' is assigned a value but never used.","'ActivityStore' is defined but never used.","'RootStore' is defined but never used.","'group' is defined but never used.","'Segment' is defined but never used.","'hasLengthBetween' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'activity.id.length'. Either include it or remove the dependency array.","ArrayExpression",["341"],"'handleInputChange' is assigned a value but never used.","'fil' is defined but never used.","'promises' is defined but never used.","'data' is assigned a value but never used.","'config' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'ca' is defined but never used.","'tr' is defined but never used.","'configure' is defined but never used.","'createContext' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'React' is defined but never used.","'deleteActivity' is assigned a value but never used.","'submitting' is assigned a value but never used.","'target' is assigned a value but never used.","'observe' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Observer' is defined but never used.","'FinalForm' is defined but never used.","'FormField' is defined but never used.","'Label' is defined but never used.","'ErrorMessage' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'Button' is defined but never used.","'Header' is defined but never used.","'MessageHeader' is defined but never used.",["339"],["340"],"'uploadPhoto' is assigned a value but never used.","'uploadingPhoto' is assigned a value but never used.","'makeObservable' is defined but never used.","'isCurrentUser' is assigned a value but never used.","'Image' is defined but never used.","React Hook useCallback has a missing dependency: 'setFiles'. Either include it or remove the dependency array. If 'setFiles' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["342"],"'Component' is defined but never used.","'useEffect' is defined but never used.","'loadFollowings' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},"Update the dependencies array to be: [LoadActivity, clearActivity, match.params.id, initialFormState, activity.id.length]",{"range":"347","text":"348"},"Update the dependencies array to be: [setFiles]",{"range":"349","text":"350"},[2054,2115],"[LoadActivity, clearActivity, match.params.id, initialFormState, activity.id.length]",[816,818],"[setFiles]"]